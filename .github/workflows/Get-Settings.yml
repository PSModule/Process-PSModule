name: Get-Settings

on:
  workflow_call:
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Skip:
        type: string
        description: |
          Defines what to skip. Allowed values are 'None', 'AllTests', 'SourceCodeTests', 'ModuleTests', 'PSModuleTests', 'LocalModuleTests',
          'macOSTests', 'WindowsTests', 'LinuxTests', 'BuildDocs', 'PublishDocs', 'PublishModule'.
        required: false
      TestProcess:
        type: boolean
        description: Whether to test the process.
        required: false
      SettingsPath:
        type: string
        description: The path to the settings file. Settings in the settings file take precedence over the action inputs.
        required: false
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

    outputs:
      Name:
        description: The name of the module to process.
        value: ${{ jobs.Get-Settings.outputs.Name }}
      Skip:
        description: Defines what to skip in the process.
        value: ${{ jobs.Get-Settings.outputs.Skip }}
      TestProcess:
        description: Whether to test the process.
        value: ${{ jobs.Get-Settings.outputs.TestProcess }}
      SettingsPath:
        description: The path to the settings file.
        value: ${{ jobs.Get-Settings.outputs.SettingsPath }}
      SourceCodeTestSuites:
        description: Source Code PSModule test suites to run.
        value: ${{ jobs.Get-Settings.outputs.SourceCodeTestSuites }}
      ModuleTestSuites:
        description: Module PSModule test suites to run.
        value: ${{ jobs.Get-Settings.outputs.ModuleTestSuites }}
      ModuleLocalTestSuites:
        description: Module local test suites to run.
        value: ${{ jobs.Get-Settings.outputs.ModuleLocalTestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-Settings:
    name: Get-Settings
    runs-on: ubuntu-latest
    outputs:
      Name: ${{ fromJson(steps.Get-Settings.outputs.result).Name }}
      Skip: ${{ fromJson(steps.Get-Settings.outputs.result).Skip }}
      TestProcess: ${{ fromJson(steps.Get-Settings.outputs.result).TestProcess }}
      SettingsPath: ${{ fromJson(steps.Get-Settings.outputs.result).SettingsPath }}
      SourceCodeTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).SourceCodeTestSuites }}
      ModuleTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).ModuleTestSuites }}
      ModuleLocalTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).ModuleLocalTestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-Settings
        uses: PSModule/GitHub-Script@v1
        id: Get-Settings
        env:
          PSMODULE_GET_SETTINGS_INPUT_Name: ${{ inputs.Name }}
          PSMODULE_GET_SETTINGS_INPUT_Skip: ${{ inputs.Skip }}
          PSMODULE_GET_SETTINGS_INPUT_TestProcess: ${{ inputs.TestProcess }}
          PSMODULE_GET_SETTINGS_INPUT_SettingsPath: ${{ inputs.SettingsPath }}
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Get-Settings
            $settingsPath = $env:PSMODULE_GET_SETTINGS_INPUT_SettingsPath
            $name = $env:PSMODULE_GET_SETTINGS_INPUT_Name
            $skip = $env:PSMODULE_GET_SETTINGS_INPUT_Skip
            $testProcess = $env:PSMODULE_GET_SETTINGS_INPUT_TestProcess

            LogGroup "Inputs:" {
              [PSCustomObject]@{
                Name          = $name
                Skip          = $skip
                TestProcess   = $testProcess
                SettingsPath  = $settingsPath
              } | Format-Table -AutoSize | Out-String
            }

            Install-PSResource -Name 'powershell-yaml' -Repository 'PSModule' -TrustRepository

            $settingsPath = Resolve-Path -Path $settingsPath -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
            if (-not $settingsPath) {
                Write-Host 'No settings file found.'
            } else {
                Write-Host "Settings file found at [$settingsPath]"
                $settings = Get-Content -Path $settingsPath | ConvertFrom-Yaml
            }

            LogGroup "Settings" {
                Write-Host ($settings | Format-Table -AutoSize | Out-String)
            }

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        env:
          PSMODULE_GET_TESTSUITES_INPUT_Skip: ${{ inputs.Skip }}
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Get-TestSuites
            $Skip = $env:PSMODULE_GET_TESTSUITES_INPUT_Skip -split '[,\s]+' | ForEach-Object {
                $_.Trim()
            }

            LogGroup 'Tests to be skipped:' {
              $Skip | ForEach-Object { " - $_" }
            }

            if ($Skip -contains 'All') {
                Write-Host "Skipping all tests as requested."
                Set-GitHubOutput -Name SourceCodeTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value '[]'
                exit 0
            }

            # Define test configurations as an array of hashtables.
            $osConfigs = @(
                [PSCustomObject]@{ RunsOn = 'ubuntu-latest'; OSName = 'Linux' }
                [PSCustomObject]@{ RunsOn = 'macos-latest';  OSName = 'macOS' }
                [PSCustomObject]@{ RunsOn = 'windows-latest'; OSName = 'Windows' }
            ) | Where-Object { $Skip -notcontains $_.OSName }

            if (-not $osConfigs) {
                Write-Host "Skipping all OS configurations."
                Set-GitHubOutput -Name SourceCodeTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value '[]'
                exit 0
            }

            LogGroup 'Source Code Test Suites:' {
                if ($Skip -notcontains 'SourceCode') {
                    $sourceCodeTestSuites = $osConfigs
                }
                $sourceCodeTestSuites | Format-Table -AutoSize | Out-String
                $sourceCodeTestSuites = ($null -ne $sourceCodeTestSuites) ? ($sourceCodeTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name SourceCodeTestSuites -Value $sourceCodeTestSuites
            }

            LogGroup 'Module Test Suites:' {
                if ($Skip -notcontains 'Module') {
                    $moduleTestSuites = $osConfigs
                }
                $moduleTestSuites | Format-Table -AutoSize | Out-String
                $moduleTestSuites = ($null -ne $moduleTestSuites) ? ($moduleTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value $moduleTestSuites
            }

            LogGroup 'Module Local Test Suites:' {
                if ($Skip -notcontains 'Module') {
                    # Locate the tests directory.
                    $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                    if (-not $testsPath -or -not (Test-Path -Path $testsPath)) {
                        Write-Warning 'No tests found'
                        exit 0
                    }
                    Write-Host "Tests found at [$testsPath]"

                    function Get-TestItemsFromFolder {
                        param ([string]$FolderPath)

                        $configFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Configuration.ps1'
                        if ($configFiles.Count -eq 1) {
                            return @($configFiles)
                        } elseif ($configFiles.Count -gt 1) {
                            throw "Multiple configuration files found in [$FolderPath]. Please separate configurations into different folders."
                        }

                        $containerFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Container.ps1'
                        if ($containerFiles.Count -ge 1) {
                            return $containerFiles
                        }

                        $testFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Tests.ps1'
                        return $testFiles
                    }

                    function Find-TestDirectories {
                        param ([string]$Path)

                        $directories = @()
                        $childDirs = Get-ChildItem -Path $Path -Directory

                        foreach ($dir in $childDirs) {
                            $directories += $dir.FullName
                            $directories += Find-TestDirectories -Path $dir.FullName
                        }

                        return $directories
                    }

                    $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)

                    $moduleLocalTestSuites = foreach ($folder in $allTestFolders) {
                        $testItems = Get-TestItemsFromFolder -FolderPath $folder
                        foreach ($item in $testItems) {
                            foreach ($osConfig in $osConfigs) {
                                [pscustomobject]@{
                                    RunsOn   = $osConfig.RunsOn
                                    OSName   = $osConfig.OSName
                                    TestPath = Resolve-Path -Path $item.FullName -Relative
                                    TestName = ($item.BaseName).Split('.')[0]
                                }
                            }
                        }
                    }
                }
                $moduleLocalTestSuites | Format-Table -AutoSize | Out-String
                $moduleLocalTestSuites = ($null -ne $moduleLocalTestSuites) ? ($moduleLocalTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value $moduleLocalTestSuites
            }
