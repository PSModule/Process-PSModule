name: Get-Settings

on:
  workflow_call:
    inputs:
      SettingsPath:
        type: string
        description: The path to the settings file.
        required: false
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The path to the root of the repo.
        required: false
        default: '.'

    outputs:
      Settings:
        description: The path to the settings file.
        value: ${{ jobs.Get-Settings.outputs.Settings }}
      SourceCodeTestSuites:
        description: Source Code PSModule test suites to run.
        value: ${{ jobs.Get-Settings.outputs.SourceCodeTestSuites }}
      PSModuleTestSuites:
        description: Module PSModule test suites to run.
        value: ${{ jobs.Get-Settings.outputs.PSModuleTestSuites }}
      ModuleTestSuites:
        description: Module local test suites to run.
        value: ${{ jobs.Get-Settings.outputs.ModuleTestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-Settings:
    name: Get-Settings
    runs-on: ubuntu-latest
    outputs:
      Settings: ${{ fromJson(steps.Get-Settings.outputs.result).Settings }}
      SourceCodeTestSuites: ${{ fromJson(steps.Get-Settings.outputs.result).SourceCodeTestSuites }}
      PSModuleTestSuites: ${{ fromJson(steps.Get-Settings.outputs.result).PSModuleTestSuites }}
      ModuleTestSuites: ${{ fromJson(steps.Get-Settings.outputs.result).ModuleTestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-Settings
        uses: PSModule/GitHub-Script@v1
        id: Get-Settings
        env:
          PSMODULE_GET_SETTINGS_INPUT_SettingsPath: ${{ inputs.SettingsPath }}
        with:
          Name: Get-Settings
          ShowInfo: false
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Get-Settings
            $settingsPath = $env:PSMODULE_GET_SETTINGS_INPUT_SettingsPath
            LogGroup "Inputs:" {
                [pscustomobject]@{
                    settingsPath = $settingsPath
                } | Format-List | Out-String
            }

            if (![string]::IsNullOrEmpty($settingsPath) -and (Test-Path -Path $settingsPath)) {
                $settingsPath = Resolve-Path -Path $settingsPath -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                $settings = Import-Hashtable -Path $settingsPath
                $relativeSettingsPath = Resolve-Path -Path $settingsPath -Relative
                LogGroup "Settings from [$relativeSettingsPath]:" {
                    Write-Host ($settings | Format-Hashtable | Out-String)
                }
            } else {
                Write-Host 'No settings file present.'
                $settings = @{}
            }

            LogGroup 'Settings' {
                $settings = [pscustomobject]@{
                    Name       = $settings.Name ?? $env:GITHUB_REPOSITORY_NAME
                    CodeCoveragePercentTarget = $settings.CodeCoveragePercentTarget ?? 80
                    Test       = [pscustomobject]@{
                        Skip       = $settings.Test.Skip ?? $false
                        Linux      = [pscustomobject]@{
                            Skip = $settings.Test.Linux.Skip ?? $false
                        }
                        MacOS      = [pscustomobject]@{
                            Skip = $settings.Test.MacOS.Skip ?? $false
                        }
                        Windows    = [pscustomobject]@{
                            Skip = $settings.Test.Windows.Skip ?? $false
                        }
                        SourceCode = [pscustomobject]@{
                            Skip    = $settings.Test.SourceCode.Skip ?? $false
                            Linux   = [pscustomobject]@{
                                Skip = $settings.Test.SourceCode.Linux.Skip ?? $false
                            }
                            MacOS   = [pscustomobject]@{
                                Skip = $settings.Test.SourceCode.MacOS.Skip ?? $false
                            }
                            Windows = [pscustomobject]@{
                                Skip = $settings.Test.SourceCode.Windows.Skip ?? $false
                            }
                        }
                        PSModule   = [pscustomobject]@{
                            Skip    = $settings.Test.PSModule.Skip ?? $false
                            Linux   = [pscustomobject]@{
                                Skip = $settings.Test.PSModule.Linux.Skip ?? $false
                            }
                            MacOS   = [pscustomobject]@{
                                Skip = $settings.Test.PSModule.MacOS.Skip ?? $false
                            }
                            Windows = [pscustomobject]@{
                                Skip = $settings.Test.PSModule.Windows.Skip ?? $false
                            }
                        }
                        Module     = [pscustomobject]@{
                            Skip    = $settings.Test.Module.Skip ?? $false
                            Linux   = [pscustomobject]@{
                                Skip = $settings.Test.Module.Linux.Skip ?? $false
                            }
                            MacOS   = [pscustomobject]@{
                                Skip = $settings.Test.Module.MacOS.Skip ?? $false
                            }
                            Windows = [pscustomobject]@{
                                Skip = $settings.Test.Module.Windows.Skip ?? $false
                            }
                        }
                    }
                    Build      = [pscustomobject]@{
                        Skip   = $settings.Build.Skip ?? $false
                        Module = [pscustomobject]@{
                            Skip = $settings.Build.Module.Skip ?? $false
                        }
                        Docs   = [pscustomobject]@{
                            Skip = $settings.Build.Docs.Skip ?? $false
                        }
                    }
                    Publishing = [pscustomobject]@{
                        AutoCleanup           = $settings.Publishing.AutoCleanup ?? $true
                        AutoPatching          = $settings.Publishing.AutoPatching ?? $true
                        IncrementalPrerelease = $settings.Publishing.IncrementalPrerelease ?? $false
                        DatePrereleaseFormat  = $settings.Publishing.DatePrereleaseFormat ?? ''
                        VersionPrefix         = $settings.Publishing.VersionPrefix ?? 'v'
                        MajorLabels           = $settings.Publishing.MajorLabels ?? @('major', 'breaking')
                        MinorLabels           = $settings.Publishing.MinorLabels ?? @('minor', 'feature')
                        PatchLabels           = $settings.Publishing.PatchLabels ?? @('patch', 'fix')
                        IgnoreLabels          = $settings.Publishing.IgnoreLabels ?? @('NoRelease')
                    }
                }
                Write-Host ($settings | ConvertTo-Hashtable | Format-Hashtable | Out-String)
            }

            Set-GitHubOutput -Name Settings -Value ($settings | ConvertTo-Json -Depth 10)

            # Get-TestSuites
            if ($settings.Test.Skip) {
                Write-Host 'Skipping all tests.'
                Set-GitHubOutput -Name SourceCodeTestSuites -Value '[]'
                Set-GitHubOutput -Name PSModuleTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value '[]'
                exit 0
            }

            # Define test configurations as an array of hashtables.
            $linux = [PSCustomObject]@{ RunsOn = 'ubuntu-latest'; OSName = 'Linux' }
            $macOS = [PSCustomObject]@{ RunsOn = 'macos-latest'; OSName = 'macOS' }
            $windows = [PSCustomObject]@{ RunsOn = 'windows-latest'; OSName = 'Windows' }

            LogGroup 'Source Code Test Suites:' {
                $sourceCodeTestSuites = if ($settings.Test.SourceCode.Skip) {
                    Write-Host 'Skipping all source code tests.'
                } else {
                    if (-not $settings.Test.Linux.Skip -and -not $settings.Test.SourceCode.Linux.Skip) { $linux }
                    if (-not $settings.Test.MacOS.Skip -and -not $settings.Test.SourceCode.MacOS.Skip) { $macOS }
                    if (-not $settings.Test.Windows.Skip -and -not $settings.Test.SourceCode.Windows.Skip) { $windows }
                }
                $sourceCodeTestSuites | Format-Table -AutoSize | Out-String
                $sourceCodeTestSuites = ($null -ne $sourceCodeTestSuites) ? ($sourceCodeTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name SourceCodeTestSuites -Value $sourceCodeTestSuites
            }

            LogGroup 'PSModule Test Suites:' {
                $psModuleTestSuites = if ($settings.Test.PSModule.Skip) {
                    Write-Host 'Skipping all PSModule tests.'
                } else {
                    if (-not $settings.Test.Linux.Skip -and -not $settings.Test.PSModule.Linux.Skip) { $linux }
                    if (-not $settings.Test.MacOS.Skip -and -not $settings.Test.PSModule.MacOS.Skip) { $macOS }
                    if (-not $settings.Test.Windows.Skip -and -not $settings.Test.PSModule.Windows.Skip) { $windows }
                }
                $psModuleTestSuites | Format-Table -AutoSize | Out-String
                $psModuleTestSuites = ($null -ne $psModuleTestSuites) ? ($psModuleTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name PSModuleTestSuites -Value $psModuleTestSuites
            }

            LogGroup 'Module Local Test Suites:' {
                $moduleTestSuites = if ($settings.Test.Module.Skip) {
                    Write-Host 'Skipping all module tests.'
                    Set-GitHubOutput -Name ModuleTestSuites -Value $moduleTestSuites
                } else {
                    # Locate the tests directory.
                    $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                    if (-not $testsPath) {
                        Write-Warning 'No tests found'
                    }
                    Write-Host "Tests found at [$testsPath]"

                    function Get-TestItemsFromFolder {
                        param ([string]$FolderPath)

                        $configFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Configuration.ps1'
                        if ($configFiles.Count -eq 1) {
                            return @($configFiles)
                        } elseif ($configFiles.Count -gt 1) {
                            throw "Multiple configuration files found in [$FolderPath]. Please separate configurations into different folders."
                        }

                        $containerFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Container.ps1'
                        if ($containerFiles.Count -ge 1) {
                            return $containerFiles
                        }

                        $testFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Tests.ps1'
                        return $testFiles
                    }

                    function Find-TestDirectories {
                        param ([string]$Path)

                        $directories = @()
                        $childDirs = Get-ChildItem -Path $Path -Directory

                        foreach ($dir in $childDirs) {
                            $directories += $dir.FullName
                            $directories += Find-TestDirectories -Path $dir.FullName
                        }

                        return $directories
                    }

                    $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)

                    foreach ($folder in $allTestFolders) {
                        $testItems = Get-TestItemsFromFolder -FolderPath $folder
                        foreach ($item in $testItems) {
                            if (-not $settings.Test.Linux.Skip -and -not $settings.Test.Module.Linux.Skip) {
                                [pscustomobject]@{
                                    RunsOn   = $linux.RunsOn
                                    OSName   = $linux.OSName
                                    TestPath = Resolve-Path -Path $item.FullName -Relative
                                    TestName = ($item.BaseName).Split('.')[0]
                                }
                            }
                            if (-not $settings.Test.MacOS.Skip -and -not $settings.Test.Module.MacOS.Skip) {
                                [pscustomobject]@{
                                    RunsOn   = $macOS.RunsOn
                                    OSName   = $macOS.OSName
                                    TestPath = Resolve-Path -Path $item.FullName -Relative
                                    TestName = ($item.BaseName).Split('.')[0]
                                }
                            }
                            if (-not $settings.Test.Windows.Skip -and -not $settings.Test.Module.Windows.Skip) {
                                [pscustomobject]@{
                                    RunsOn   = $windows.RunsOn
                                    OSName   = $windows.OSName
                                    TestPath = Resolve-Path -Path $item.FullName -Relative
                                    TestName = ($item.BaseName).Split('.')[0]
                                }
                            }
                        }
                    }
                }
                $moduleTestSuites | Format-Table -AutoSize | Out-String
                $moduleTestSuites = ($null -ne $moduleTestSuites) ? ($moduleTestSuites | ConvertTo-Json -AsArray) : '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value $moduleTestSuites
            }
