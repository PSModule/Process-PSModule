name: Build-Docs

on:
  workflow_call:
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'
      ShowSummaryOnSuccess:
        type: boolean
        description: Whether to show the super-linter summary on success.
        required: false
        default: false

permissions:
  contents: read # to checkout the repo
  statuses: write # to create commit status

jobs:
  Build-Docs:
    name: Build-Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Download module artifact
        uses: actions/download-artifact@v6
        with:
          name: module
          path: ${{ inputs.WorkingDirectory }}/outputs/module

      - name: Document module
        uses: PSModule/Document-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}

      - name: Upload docs artifact
        uses: actions/upload-artifact@v5
        with:
          name: docs
          path: ${{ inputs.WorkingDirectory }}/outputs/docs
          if-no-files-found: error
          retention-days: 1

      - name: Commit all changes
        uses: PSModule/GitHub-Script@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Rename the gitignore file to .gitignore.bak
            if (Test-Path -Path .gitignore) {
                Rename-Item -Path '.gitignore' -NewName '.gitignore.bak' -Force
            }

            try {
                # Add all changes to the repository
                git add .
                git commit -m 'Update documentation'
            } catch {
                Write-Host "No changes to commit"
            }

            # Restore the gitignore file
            if (Test-Path -Path .gitignore.bak) {
                Rename-Item -Path '.gitignore.bak' -NewName '.gitignore' -Force
            }

      - name: Lint documentation
        id: super-linter
        uses: super-linter/super-linter/slim@2bdd90ed3262e023ac84bf8fe35dc480721fc1f2 # v8.2.1
        env:
          RUN_LOCAL: true
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ inputs.WorkingDirectory }}
          FILTER_REGEX_INCLUDE: ${{ inputs.WorkingDirectory }}/outputs/docs
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true
          GITHUB_TOKEN: ${{ github.token }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_BIOME_FORMAT: false
          VALIDATE_BIOME_LINT: false
          VALIDATE_GITHUB_ACTIONS_ZIZMOR: false
          VALIDATE_GITLEAKS: false
          VALIDATE_JSCPD: false
          VALIDATE_JSON_PRETTIER: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_YAML_PRETTIER: false
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: false
          SAVE_SUPER_LINTER_SUMMARY: true

      - name: Post super-linter summary
        if: failure() || inputs.ShowSummaryOnSuccess == true
        shell: pwsh
        run: |
          $summaryPath = Join-Path $env:GITHUB_WORKSPACE 'super-linter-output' 'super-linter-summary.md'
          Get-Content $summaryPath | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8

          $failed = '${{ steps.super-linter.outcome }}' -eq 'failure'
          if ($failed) {
              Write-Host "::error::Super-linter found issues. Please review the summary above."
              exit 1
          }
