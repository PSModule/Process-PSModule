name: Build-Docs

on:
  workflow_call:
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

permissions:
  contents: read # to checkout the repo

jobs:
  Build-Docs:
    name: Build-Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.WorkingDirectory }}/outputs/module

      - name: Document module
        uses: PSModule/Document-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: ${{ inputs.WorkingDirectory }}/outputs/docs
          if-no-files-found: error
          retention-days: 1

      - name: Commit all changes
        uses: PSModule/GitHub-Script@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Rename the gitignore file to .gitignore.bak
            if (Test-Path -Path .gitignore) {
                Rename-Item -Path '.gitignore' -NewName '.gitignore.bak' -Force
            }

            try {
                # Add all changes to the repository
                git add .
                git commit -m 'Update documentation'
            } catch {
                Write-Host "No changes to commit"
            }

            # Restore the gitignore file
            if (Test-Path -Path .gitignore.bak) {
                Rename-Item -Path '.gitignore.bak' -NewName '.gitignore' -Force
            }

      - name: Lint documentation
        uses: super-linter/super-linter/slim@latest
        env:
          FILTER_REGEX_INCLUDE: outputs/docs
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ inputs.WorkingDirectory }}
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true
          GITHUB_TOKEN: ${{ github.token }}
          RUN_LOCAL: true
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JSON_PRETTIER: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_YAML_PRETTIER: false
          VALIDATE_JSCPD: false
          VALIDATE_GITLEAKS: false

      - uses: actions/configure-pages@v5

      - name: Install mkdoks-material
        shell: pwsh
        run: |
          pip install mkdocs-material
          pip install mkdocs-git-authors-plugin
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-git-committers-plugin-2

      - name: Structure site
        uses: PSModule/GitHub-Script@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            LogGroup "Get folder structure" {
                $functionDocsFolder = New-Item -Path "outputs/site/docs/Functions" -ItemType Directory -Force
                Copy-Item -Path "outputs/docs/*" -Destination "outputs/site/docs/Functions" -Recurse -Force
                $moduleName = [string]::IsNullOrEmpty('${{ inputs.Name }}') ? $env:GITHUB_REPOSITORY_NAME : '${{ inputs.Name }}'
                $ModuleSourcePath = Resolve-Path 'src' | Select-Object -ExpandProperty Path
                $SiteOutputPath = Resolve-Path 'outputs/site' | Select-Object -ExpandProperty Path

                Write-Host "Function Docs Folder: $functionDocsFolder"
                Write-Host "Module Name:          $moduleName"
                Write-Host "Module Source Path:   $ModuleSourcePath"
                Write-Host "Site Output Path:     $SiteOutputPath"
            }

            LogGroup "Get folder structure" {
                Get-ChildItem -Recurse | Select-Object -ExpandProperty FullName | Sort-Object | Format-List
            }

            Get-ChildItem -Path $functionDocsFolder -Recurse -Force -Include '*.md' | ForEach-Object {
                $fileName = $_.Name
                LogGroup " - $fileName" {
                    Show-FileContent -Path $_
                }
            }

            LogGroup 'Build docs - Process about topics' {
                $aboutDocsFolderPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/About'
                $aboutDocsFolder = New-Item -Path $aboutDocsFolderPath -ItemType Directory -Force
                $aboutSourceFolder = Get-ChildItem -Path $ModuleSourcePath -Directory | Where-Object { $_.Name -eq 'en-US' }
                Get-ChildItem -Path $aboutSourceFolder -Filter *.txt | Copy-Item -Destination $aboutDocsFolder -Force -Verbose -PassThru |
                    Rename-Item -NewName { $_.Name -replace '.txt', '.md' }

                Write-Host "About Docs Folder:    $aboutDocsFolder"
                Write-Host "About Source Folder:  $aboutSourceFolder"
            }

            LogGroup 'Build docs - Copy icon to assets' {
                $assetsFolderPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/Assets'
                $assetsFolder = New-Item -Path $assetsFolderPath -ItemType Directory -Force
                $rootPath = Split-Path -Path $ModuleSourcePath -Parent
                $iconPath = Resolve-Path 'icon\icon.png' | Select-Object -ExpandProperty Path
                Copy-Item -Path $iconPath -Destination $assetsFolder -Force -Verbose

                Write-Host "Assets Folder:        $assetsFolder"
                Write-Host "Icon Path:            $iconPath"
            }

            LogGroup 'Build docs - Copy readme.md' {
                $readmePath = Resolve-Path 'README.md' | Select-Object -ExpandProperty Path
                $readmeTargetPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/README.md'
                Copy-Item -Path $readmePath -Destination $readmeTargetPath -Force -Verbose

                Write-Host "Readme Path:          $readmePath"
                Write-Host "Readme Target Path:   $readmeTargetPath"
            }

            LogGroup 'Build docs - Create mkdocs.yml' {
                $rootPath = Split-Path -Path $ModuleSourcePath -Parent
                # This should be moved to an action so that we can use a default one, and not have to copy it from the repo.
                $mkdocsSourcePath = Join-Path -Path $rootPath -ChildPath 'mkdocs.yml'
                $mkdocsTargetPath = Join-Path -Path $SiteOutputPath -ChildPath 'mkdocs.yml'

                Write-Host "Mkdocs Source Path:   $mkdocsSourcePath"
                Write-Host "Mkdocs Target Path:   $mkdocsTargetPath"

                $mkdocsContent = Get-Content -Path $mkdocsSourcePath -Raw
                $mkdocsContent = $mkdocsContent.Replace('-{{ REPO_NAME }}-', $ModuleName)
                $mkdocsContent = $mkdocsContent.Replace('-{{ REPO_OWNER }}-', $env:GITHUB_REPOSITORY_OWNER)
                $mkdocsContent | Set-Content -Path $mkdocsTargetPath -Force
                Show-FileContent -Path $mkdocsTargetPath
            }

      - name: Debug File system
        shell: pwsh
        working-directory: ${{ inputs.WorkingDirectory }}
        run: |
          Get-ChildItem -Path . -Recurse | ForEach-Object {
              [System.IO.Path]::GetRelativePath($PSScriptRoot, $_.FullName)
          } | Sort-Object

      - name: Build mkdocs-material project
        working-directory: ${{ inputs.WorkingDirectory }}/outputs/site
        shell: pwsh
        run: |
          LogGroup 'Build docs - mkdocs build - content' {
            Show-FileContent -Path mkdocs.yml
          }

          LogGroup 'Build docs - mkdocs build' {
            mkdocs build --config-file mkdocs.yml --site-dir ../../_site
          }

      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ${{ inputs.WorkingDirectory }}/_site
          retention-days: 1
