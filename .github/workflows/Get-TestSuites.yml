name: Get-TestSuites

on:
  workflow_call:
    inputs:
      SkipTests:
        type: string
        description: Defines what types of tests to skip. Allowed values are 'All', 'SourceCode', 'Module', 'None', 'macOS', 'Windows', 'Linux'.
        required: false
        default: None
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

    outputs:
      SourceCodeTestSuites:
        description: Source Code test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.SourceCodeTestSuites }}
      ModuleTestSuites:
        description: Module test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.ModuleTestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      SourceCodeTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).SourceCodeTestSuites }}
      ModuleTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).ModuleTestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        env:
          PSMODULE_GET_TESTSUITES_INPUT_SkipTests: ${{ inputs.SkipTests }}
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Define test configurations as an array of hashtables.
            $osConfigs = @(
                @{ RunsOn = 'ubuntu-latest'; OSName = 'Linux' }
                @{ RunsOn = 'macos-latest';  OSName = 'macOS' }
                @{ RunsOn = 'windows-latest'; OSName = 'Windows' }
            )

            # Locate the tests directory.
            $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
            if (-not $testsPath -or -not (Test-Path -Path $testsPath)) {
                Write-Host 'No tests found'
                exit 0
            }
            Write-Host "Tests found at [$testsPath]"

            function Get-TestItemsFromFolder {
                param ([string]$FolderPath)

                $configFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Configuration.ps1'
                if ($configFiles.Count -eq 1) {
                    return @($configFiles)
                } elseif ($configFiles.Count -gt 1) {
                    throw "Multiple configuration files found in [$FolderPath]. Please separate configurations into different folders."
                }

                $containerFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Container.ps1'
                if ($containerFiles.Count -ge 1) {
                    return $containerFiles
                }

                $testFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Tests.ps1'
                return $testFiles
            }

            function Find-TestDirectories {
                param ([string]$Path)

                $directories = @()
                $childDirs = Get-ChildItem -Path $Path -Directory

                foreach ($dir in $childDirs) {
                    $directories += $dir.FullName
                    $directories += Find-TestDirectories -Path $dir.FullName
                }

                return $directories
            }

            $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)

            $skipTests = $env:PSMODULE_GET_TESTSUITES_INPUT_SkipTests -Split ",|\s+" | ForEach-Object { $_.Trim() }

            Write-Host "The following tests will be skipped:"
            $skipTests | ForEach-Object { " - $_ " }

            $testSuites = foreach ($folder in $allTestFolders) {
                $testItems = Get-TestItemsFromFolder -FolderPath $folder
                foreach ($item in $testItems) {
                    foreach ($osConfig in $osConfigs) {
                        if ($skipTests -contains 'All' -or
                            $skipTests -contains $osConfig.OSName -or
                            ($skipTests -contains 'Module' -and $item.Name -match '\.Tests\.ps1$') -or
                            ($skipTests -contains 'SourceCode' -and $item.Name -match '\.(Configuration|Container)\.ps1$')) {
                            continue
                        }

                        [pscustomobject]@{
                            RunsOn   = $osConfig.RunsOn
                            OSName   = $osConfig.OSName
                            TestPath = Resolve-Path -Path $item.FullName -Relative
                            TestName = $item.BaseName
                        }
                    }
                }
            }

            # Adjust source code test suites based on SkipTests
            $sourceCodeTestSuites = $osConfigs | Where-Object {
                -not ($skipTests -contains 'All' -or $skipTests -contains $_.OSName -or $skipTests -contains 'SourceCode')
            } | Select-Object -Property RunsOn, OSName -Unique

            # Display the generated matrices for verification.
            Write-Host "Source Code Test Suites:"
            $sourceCodeTestSuites | Format-Table -AutoSize | Out-String
            Write-Host "Module Test Suites:"
            $testSuites | Format-Table -AutoSize | Out-String

            # Pass the final objects to GitHub Actions output.
            Set-GitHubOutput -Name SourceCodeTestSuites -Value $sourceCodeTestSuites
            Set-GitHubOutput -Name ModuleTestSuites -Value $testSuites
