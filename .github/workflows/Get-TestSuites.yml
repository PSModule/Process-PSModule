name: Get-TestSuites

on:
  workflow_call:
    inputs:
      Path:
        type: string
        description: The path to the root of the repo.
        required: false
        default: ${{ github.workspace }}
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
    outputs:
      TestSuites:
        description: The test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.TestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      TestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).TestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        with:
          ShowOutput: true
          WorkingDirectory: ${{ inputs.Path }}
          Script: |
            # Define your test configurations
            $testConfigs = @(
                @{
                    OS     = 'ubuntu-latest'
                    Shells = 'pwsh'
                    Path   = ''  # to be filled later
                },
                @{
                    OS     = 'macos-latest'
                    Shells = 'pwsh'
                    Path   = ''
                },
                @{
                    OS     = 'windows-latest'
                    Shells = 'pwsh'
                    Path   = ''
                },
                @{
                    OS     = 'windows-latest'
                    Shells = 'powershell'
                    Path   = ''
                }
            )

            # Locate the tests directory
            $testsPath = Resolve-Path 'tests' | Select-Object -ExpandProperty Path
            if (-not (Test-Path -Path $testsPath)) {
                Write-Host 'No tests found'
                exit 0
            }
            Write-Host "Tests found at [$testsPath]"

            # Get all directories inside the tests folder.
            $testsPaths = Get-ChildItem -Path $testsPath -Directory | ForEach-Object { $_.FullName }
            if (-not $testsPaths) {
                # If no subdirectories, use the tests folder itself.
                $testsPaths = , $testsPath
            }

            # Build the test suites matrix
            $testSuites = @()
            foreach ($folder in $testsPaths) {
                foreach ($config in $testConfigs) {
                    # For each folder and config, produce a new object with the proper values.
                    $testSuite = @{
                        OS     = $config.OS
                        Shells = $config.Shells
                        Path   = $folder
                    }
                    $testSuites += $testSuite
                }
            }

            # (Optional) Display the generated matrix in a table for verification.
            $testSuites | Format-Table -AutoSize

            # Pass the final object to GitHub Actions output
            Set-GitHubOutput -Name TestSuites -Value $testSuites -Verbose -Debug -Confirm:$false

