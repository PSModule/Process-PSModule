name: Get-TestSuites

on:
  workflow_call:
    inputs:
      Path:
        type: string
        description: The path to the root of the repo.
        required: false
        default: ${{ github.workspace }}
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
    outputs:
      TestSuites:
        description: The test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.TestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      TestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).TestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        with:
          ShowOutput: true
          WorkingDirectory: ${{ inputs.Path }}
          Script: |
            $shellsToTest = @('pwsh')
            $OSsToTest = @('ubuntu-latest', 'macos-latest', 'windows-latest')

            $testsPath = Resolve-Path 'tests' | Select-Object -ExpandProperty Path
            if (-not (Test-Path -Path $testsPath)) {
                Write-Host "No tests found"
                exit 0
            }

            Write-Host "Tests found at [$testsPath]"

            $testsPaths = @()
            Get-ChildItem -Path $testsPath -Directory | ForEach-Object {
                $testsPaths += $_.FullName
            }
            if (-not $testsPaths) {
                $testsPaths += @($testsPath)
            }

            $testsPaths | Format-List

            $testSuites = @{
              OS = $OSsToTest
              Path = $testsPaths
            }

            Set-GitHubOutput -Name TestSuites -Value $testSuites -Verbose -Debug -Confirm:$false
