name: Get-TestSuites

on:
  workflow_call:
    inputs:
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

    outputs:
      TestSuites:
        description: The test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.TestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      TestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).TestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Define test configurations as an array of hashtables.
            $osConfigs = @(
                @{ runson = 'ubuntu-latest'; name = 'Linux' }
                @{ runson = 'macos-latest';  name = 'macOS' }
                @{ runson = 'windows-latest'; name = 'Windows' }
            )

            # Locate the tests directory.
            $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
            if (-not $testsPath -or -not (Test-Path -Path $testsPath)) {
                Write-Host 'No tests found'
                exit 0
            }
            Write-Host "Tests found at [$testsPath]"

            function Get-TestItemsFromFolder {
                param ([string]$FolderPath)

                $configFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Configuration.ps1'
                if ($configFiles.Count -eq 1) {
                    return @($configFiles)
                } elseif ($configFiles.Count -gt 1) {
                    throw "Multiple configuration files found in [$FolderPath]. Please separate configurations into different folders."
                }

                $containerFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Container.ps1'
                if ($containerFiles.Count -ge 1) {
                    return $containerFiles
                }

                $testFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Tests.ps1'
                return $testFiles
            }

            function Find-TestDirectories {
                param ([string]$Path)

                $directories = @()
                $childDirs = Get-ChildItem -Path $Path -Directory

                foreach ($dir in $childDirs) {
                    $directories += $dir.FullName
                    $directories += Find-TestDirectories -Path $dir.FullName
                }

                return $directories
            }

            $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)

            $testSuites = foreach ($folder in $allTestFolders) {
                $testItems = Get-TestItemsFromFolder -FolderPath $folder
                foreach ($item in $testItems) {
                    foreach ($osConfig in $osConfigs) {
                        [pscustomobject]@{
                            RunsOn   = $osConfig.runson
                            OSName   = $osConfig.name
                            TestPath = Resolve-Path -Path $item.FullName -Relative
                            TestName = $item.BaseName
                        }
                    }
                }
            }

            # (Optional) Display the generated matrix in a table for verification.
            $testSuites | Format-Table -AutoSize

            # Pass the final object to GitHub Actions output.
            Set-GitHubOutput -Name TestSuites -Value $testSuites
