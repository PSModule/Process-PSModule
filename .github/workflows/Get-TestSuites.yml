name: Get-TestSuites

on:
  workflow_call:
    inputs:
      SkipTests:
        type: string
        description: Defines what types of tests to skip. Allowed values are 'All', 'SourceCode', 'Module', 'None', 'macOS', 'Windows', 'Linux'.
        required: false
        default: None
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

    outputs:
      SourceCodeTestSuites:
        description: Source Code PSModule test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.SourceCodeTestSuites }}
      ModuleTestSuites:
        description: Module PSModule test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.ModuleTestSuites }}
      ModuleLocalTestSuites:
        description: Module local test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.ModuleLocalTestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      SourceCodeTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).SourceCodeTestSuites }}
      ModuleTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).ModuleTestSuites }}
      ModuleLocalTestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).ModuleLocalTestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        env:
          PSMODULE_GET_TESTSUITES_INPUT_SkipTests: ${{ inputs.SkipTests }}
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Get-TestSuites
            $skipTests = $env:PSMODULE_GET_TESTSUITES_INPUT_SkipTests -Split ",|\s+" | ForEach-Object { $_.Trim() }

            LogGroup 'Tests to be skipped:' {
              $skipTests | ForEach-Object { " - $_ " }
            }

            if ($skipTests -contains 'All') {
                Write-Host "Skipping all tests as requested."
                Set-GitHubOutput -Name SourceCodeTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value '[]'
                exit 0
            }

            # Define test configurations as an array of hashtables.
            $osConfigs = @(
                [PSCustomObject]@{ RunsOn = 'ubuntu-latest'; OSName = 'Linux' }
                [PSCustomObject]@{ RunsOn = 'macos-latest';  OSName = 'macOS' }
                [PSCustomObject]@{ RunsOn = 'windows-latest'; OSName = 'Windows' }
            ) | Where-Object { $skipTests -notcontains $_.OSName }

            if (-not $osConfigs) {
                Write-Host "Skipping all OS configurations."
                Set-GitHubOutput -Name SourceCodeTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleTestSuites -Value '[]'
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value '[]'
                exit 0
            }

            LogGroup 'Source Code Test Suites:' {
                if ($skipTests -notcontains 'SourceCode') {
                    $sourceCodeTestSuites = $osConfigs
                }
                $sourceCodeTestSuites | Format-Table -AutoSize | Out-String
                Set-GitHubOutput -Name SourceCodeTestSuites -Value ($sourceCodeTestSuites ?? '[]')
            }

            LogGroup 'Module Test Suites:' {
                if ($skipTests -notcontains 'Module') {
                    $moduleTestSuites = $osConfigs
                }
                $moduleTestSuites | Format-Table -AutoSize | Out-String
                Set-GitHubOutput -Name ModuleTestSuites -Value ($moduleTestSuites ?? '[]')
            }

            LogGroup 'Module Local Test Suites:' {
                if ($skipTests -notcontains 'Module') {
                    # Locate the tests directory.
                    $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                    if (-not $testsPath -or -not (Test-Path -Path $testsPath)) {
                        Write-Warning 'No tests found'
                        exit 0
                    }
                    Write-Host "Tests found at [$testsPath]"

                    function Get-TestItemsFromFolder {
                        param ([string]$FolderPath)

                        $configFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Configuration.ps1'
                        if ($configFiles.Count -eq 1) {
                            return @($configFiles)
                        } elseif ($configFiles.Count -gt 1) {
                            throw "Multiple configuration files found in [$FolderPath]. Please separate configurations into different folders."
                        }

                        $containerFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Container.ps1'
                        if ($containerFiles.Count -ge 1) {
                            return $containerFiles
                        }

                        $testFiles = Get-ChildItem -Path $FolderPath -File -Filter '*.Tests.ps1'
                        return $testFiles
                    }

                    function Find-TestDirectories {
                        param ([string]$Path)

                        $directories = @()
                        $childDirs = Get-ChildItem -Path $Path -Directory

                        foreach ($dir in $childDirs) {
                            $directories += $dir.FullName
                            $directories += Find-TestDirectories -Path $dir.FullName
                        }

                        return $directories
                    }

                    $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)

                    $moduleLocalTestSuites = foreach ($folder in $allTestFolders) {
                        $testItems = Get-TestItemsFromFolder -FolderPath $folder
                        foreach ($item in $testItems) {
                            foreach ($osConfig in $osConfigs) {
                                [pscustomobject]@{
                                    RunsOn   = $osConfig.RunsOn
                                    OSName   = $osConfig.OSName
                                    TestPath = Resolve-Path -Path $item.FullName -Relative
                                    TestName = ($item.BaseName).Split('.')[0]
                                }
                            }
                        }
                    }
                }
                $moduleLocalTestSuites | Format-Table -AutoSize | Out-String
                Set-GitHubOutput -Name ModuleLocalTestSuites -Value ($moduleLocalTestSuites ?? '[]')
            }
