name: Get-TestSuites

on:
  workflow_call:
    inputs:
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

    outputs:
      TestSuites:
        description: The test suites to run.
        value: ${{ jobs.Get-TestSuites.outputs.TestSuites }}

permissions:
  contents: read # to checkout the repo

jobs:
  Get-TestSuites:
    name: Get-TestSuites
    runs-on: ubuntu-latest
    outputs:
      TestSuites: ${{ fromJson(steps.Get-TestSuites.outputs.result).TestSuites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get-TestSuites
        uses: PSModule/GitHub-Script@v1
        id: Get-TestSuites
        with:
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            # Define test configurations as an array of hashtables.
            $osConfigs = @(
                @{ runson = 'ubuntu-latest'; name = 'Linux' }
                @{ runson = 'macos-latest';  name = 'macOS' }
                @{ runson = 'windows-latest'; name = 'Windows' }
            )

            # Locate the tests directory.
            $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
            if (-not $testsPath -or -not (Test-Path -Path $testsPath)) {
                Write-Host 'No tests found'
                exit 0
            }
            Write-Host "Tests found at [$testsPath]"

            # First, check if the root tests folder contains configuration.ps1, .container.ps1 or .tests.ps1 files
            $hasTestFiles = Get-ChildItem -Path $testsPath -File -Recurse:$false | Where-Object {
                $_.Name -like '*.Configuration.ps1' -or
                $_.Name -like '*.Container.ps1' -or
                $_.Name -like '*.Tests.ps1'
            }

            # Define the test paths based on our findings
            $testsPaths = @()
            if ($hasTestFiles) {
                # If the tests folder directly contains test files, only use the root folder
                Write-Host "Test files found directly in tests folder. Using only the root tests folder."
                $testsPaths = @($testsPath)
            } else {
                # Otherwise, recursively search for subdirectories that might contain tests
                Write-Host "No test files found in root tests folder. Searching subdirectories..."

                # Helper function to find test directories recursively
                function Find-TestDirectories {
                    param (
                        [string]$Path
                    )

                    $directories = @()
                    $childDirs = Get-ChildItem -Path $Path -Directory

                    foreach ($dir in $childDirs) {
                        # Check if this directory contains test files
                        $hasTests = Get-ChildItem -Path $dir.FullName -File -Recurse:$false | Where-Object {
                            $_.Name -like '*.Configuration.ps1' -or
                            $_.Name -like '*.Container.ps1' -or
                            $_.Name -like '*.Tests.ps1'
                        }

                        if ($hasTests) {
                            $directories += $dir.FullName
                        } else {
                            # Recursively check subdirectories
                            $directories += Find-TestDirectories -Path $dir.FullName
                        }
                    }

                    return $directories
                }

                $testsPaths = Find-TestDirectories -Path $testsPath

                # If no test directories were found, default to the root tests folder
                if (-not $testsPaths) {
                    Write-Host "No specific test directories found. Using the root tests folder."
                    $testsPaths = @($testsPath)
                } else {
                    Write-Host "Found test directories:"
                    $testsPaths | ForEach-Object { Write-Host " - $_" }
                }
            }

            # Build the test suites matrix.
            $testSuites = foreach ($folder in $testsPaths) {
                foreach ($osConfig in $osConfigs) {
                    [pscustomobject]@{
                        RunsOn         = $osConfig.runson
                        OSName         = $osConfig.name
                        TestFolderPath = Resolve-Path -Path $folder -Relative
                        TestName       = Split-Path -Path $folder -Leaf
                    }
                }
            }

            # (Optional) Display the generated matrix in a table for verification.
            $testSuites | Format-Table -AutoSize

            # Pass the final object to GitHub Actions output.
            Set-GitHubOutput -Name TestSuites -Value $testSuites
