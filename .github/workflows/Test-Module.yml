name: Test-SourceCode

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key for the PowerShell Gallery.
        required: true
      TEST_APP_ENT_CLIENT_ID:
        description: The client ID of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ENT_PRIVATE_KEY:
        description: The private key of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ORG_CLIENT_ID:
        description: The client ID of an Organization GitHub App for running tests.
        required: false
      TEST_APP_ORG_PRIVATE_KEY:
        description: The private key of an Organization GitHub App for running tests.
        required: false
      TEST_USER_ORG_FG_PAT:
        description: The fine-grained personal access token with org access for running tests.
        required: false
      TEST_USER_USER_FG_PAT:
        description: The fine-grained personal access token with user account access for running tests.
        required: false
      TEST_USER_PAT:
        description: The classic personal access token for running tests.
        required: false
    inputs:
      RunsOn:
        type: string
        description: The type of runner to use for the job.
        required: true
      OS:
        type: string
        description: The operating system name.
        required: true
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Path:
        type: string
        description: The path to the source code of the module.
        required: false
        default: src
      ModulesOutputPath:
        type: string
        description: The path to the output directory for the modules.
        required: false
        default: outputs/modules
      SkipTests:
        type: string
        description: Defines what types of tests to skip. Allowed values are 'All', 'SourceCode', 'Module', 'None', 'macOS', 'Windows', 'Linux'.
        required: false
        default: None
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false

permissions:
  contents: read # to checkout the repo and create releases on the repo

jobs:
  Test-SourceCode:
    name: Test source code (${{ inputs.RunsOn }})
    if: ${{ !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, inputs.OS)) }}
    runs-on: ${{ inputs.RunsOn }}
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v2
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          TestType: Module
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Passed: [${{ steps.test.outputs.passed }}]"

      - name: Failed test
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"
