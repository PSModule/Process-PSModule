name: AfterAll-ModuleLocal

on:
  workflow_call:
    secrets:
      TEST_APP_ENT_CLIENT_ID:
        description: The client ID of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ENT_PRIVATE_KEY:
        description: The private key of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ORG_CLIENT_ID:
        description: The client ID of an Organization GitHub App for running tests.
        required: false
      TEST_APP_ORG_PRIVATE_KEY:
        description: The private key of an Organization GitHub App for running tests.
        required: false
      TEST_USER_ORG_FG_PAT:
        description: The fine-grained personal access token with org access for running tests.
        required: false
      TEST_USER_USER_FG_PAT:
        description: The fine-grained personal access token with user account access for running tests.
        required: false
      TEST_USER_PAT:
        description: The classic personal access token for running tests.
        required: false
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The working directory where the script will run from.
        required: false
        default: '.'

permissions:
  contents: read # to checkout the repo

jobs:
  AfterAll-ModuleLocal:
    name: AfterAll-ModuleLocal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Install-PSModuleHelpers
        uses: PSModule/Install-PSModuleHelpers@v1

      - name: Run AfterAll Teardown Scripts
        if: always()
        uses: PSModule/GitHub-Script@v1
        env:
          TEST_APP_ENT_CLIENT_ID: ${{ secrets.TEST_APP_ENT_CLIENT_ID }}
          TEST_APP_ENT_PRIVATE_KEY: ${{ secrets.TEST_APP_ENT_PRIVATE_KEY }}
          TEST_APP_ORG_CLIENT_ID: ${{ secrets.TEST_APP_ORG_CLIENT_ID }}
          TEST_APP_ORG_PRIVATE_KEY: ${{ secrets.TEST_APP_ORG_PRIVATE_KEY }}
          TEST_USER_ORG_FG_PAT: ${{ secrets.TEST_USER_ORG_FG_PAT }}
          TEST_USER_USER_FG_PAT: ${{ secrets.TEST_USER_USER_FG_PAT }}
          TEST_USER_PAT: ${{ secrets.TEST_USER_PAT }}
          GITHUB_TOKEN: ${{ github.token }}
        with:
          Name: AfterAll-ModuleLocal
          ShowInfo: false
          ShowOutput: true
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
          Script: |
            LogGroup "Running AfterAll Teardown Scripts" {
                function Find-TestDirectories {
                    param ([string]$Path)

                    $directories = @()
                    $childDirs = Get-ChildItem -Path $Path -Directory

                    foreach ($dir in $childDirs) {
                        $directories += $dir.FullName
                        $directories += Find-TestDirectories -Path $dir.FullName
                    }

                    return $directories
                }

                # Locate the tests directory.
                $testsPath = Resolve-Path 'tests' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
                if (-not $testsPath) {
                    Write-Warning 'No tests directory found'
                    exit 0
                }
                Write-Host "Tests found at [$testsPath]"

                $allTestFolders = @($testsPath) + (Find-TestDirectories -Path $testsPath)
                $processedDirectories = @()

                foreach ($folder in $allTestFolders) {
                    $afterAllScript = Join-Path $folder "AfterAll.ps1"
                    
                    if (Test-Path $afterAllScript -PathType Leaf) {
                        # Get unique directory path to avoid duplicate execution
                        $uniqueDirectory = Resolve-Path $folder -Relative
                        if ($processedDirectories -notcontains $uniqueDirectory) {
                            $processedDirectories += $uniqueDirectory
                            
                            Write-Host "Running AfterAll teardown script: $afterAllScript"
                            try {
                                Push-Location $folder
                                & $afterAllScript
                                Write-Host "AfterAll script completed successfully: $afterAllScript"
                            }
                            catch {
                                Write-Warning "AfterAll script failed: $afterAllScript - $_"
                                # Don't throw for teardown scripts to ensure other cleanup scripts can run
                            }
                            finally {
                                Pop-Location
                            }
                        }
                    }
                }

                if ($processedDirectories.Count -eq 0) {
                    Write-Host "No AfterAll.ps1 scripts found in test directories"
                } else {
                    Write-Host "Processed AfterAll scripts in $($processedDirectories.Count) directories:"
                    $processedDirectories | ForEach-Object { Write-Host "  - $_" }
                }
            }