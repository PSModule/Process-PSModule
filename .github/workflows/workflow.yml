name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key for the PowerShell Gallery.
        required: true
      TEST_APP_ENT_CLIENT_ID:
        description: The client ID of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ENT_PRIVATE_KEY:
        description: The private key of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ORG_CLIENT_ID:
        description: The client ID of an Organization GitHub App for running tests.
        required: false
      TEST_APP_ORG_PRIVATE_KEY:
        description: The private key of an Organization GitHub App for running tests.
        required: false
      TEST_USER_ORG_FG_PAT:
        description: The fine-grained personal access token with org access for running tests.
        required: false
      TEST_USER_USER_FG_PAT:
        description: The fine-grained personal access token with user account access for running tests.
        required: false
      TEST_USER_PAT:
        description: The classic personal access token for running tests.
        required: false
    inputs:
      SettingsPath:
        type: string
        description: The path to the settings file. Settings in the settings file take precedence over the action inputs.
        required: false
        default: .github/PSModule.psd1
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The path to the root of the repo.
        required: false
        default: '.'

permissions:
  contents: write      # to checkout the repo and create releases on the repo
  pull-requests: write # to write comments to PRs
  statuses: write      # to update the status of the workflow from linter

jobs:
  Get-Settings:
    uses: ./.github/workflows/Get-Settings.yml
    with:
      SettingsPath: ${{ inputs.SettingsPath }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Test-SourceCode:
    if: ${{ needs.Get-Settings.outputs.SourceCodeTestSuites != '[]' }}
    needs:
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.SourceCodeTestSuites) }}
    uses: ./.github/workflows/Test-SourceCode.yml
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Build-Module:
    uses: ./.github/workflows/Build-Module.yml
    needs:
      - Get-Settings
    with:
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Build-Docs:
    needs:
      - Get-Settings
      - Build-Module
    uses: ./.github/workflows/Build-Docs.yml
    with:
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Test-PSModule:
    if: ${{ needs.Build-Module.result == 'success' && !cancelled() && needs.Get-Settings.outputs.PSModuleTestSuites != '[]' }}
    needs:
      - Build-Module
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.PSModuleTestSuites) }}
    uses: ./.github/workflows/Test-Module.yml
    secrets: inherit
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Test-ModuleLocal:
    if: ${{ needs.Build-Module.result == 'success' && !cancelled() && needs.Get-Settings.outputs.ModuleTestSuites != '[]' }}
    needs:
      - Build-Module
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.ModuleTestSuites) }}
    uses: ./.github/workflows/Test-ModuleLocal.yml
    secrets: inherit
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      TestPath: ${{ matrix.TestPath }}
      TestName: ${{ matrix.TestName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Get-TestResults:
    needs:
      - Get-Settings
      - Test-SourceCode
      - Test-Module
      - Test-ModuleLocal
    uses: ./.github/workflows/Get-TestResults.yml
    secrets: inherit
    with:
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}

  Get-CodeCoverage:
    needs:
      - Get-Settings
      - Test-SourceCode
      - Test-Module
      - Test-ModuleLocal
    uses: ./.github/workflows/Get-CodeCoverage.yml
    secrets: inherit
    with:
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}

  Publish-Module:
    if: ${{ needs.Get-TestResults.result == 'success' && needs.Get-CodeCoverage.result == 'success' && needs.Build-Docs.result == 'success' && !cancelled() && github.event_name == 'pull_request' }}
    needs:
      - Get-Settings
      - Get-TestResults
      - Get-CodeCoverage
      - Build-Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.WorkingDirectory }}/outputs/module

      - name: Publish module
        uses: PSModule/Publish-PSModule@v2
        with:
          Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
          ModulePath: ${{ inputs.WorkingDirectory }}/outputs/module
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ inputs.TestProcess }}
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  Publish-Site:
    if: ${{ needs.Get-TestResults.result == 'success' && needs.Get-CodeCoverage.result == 'success' && needs.Build-Docs.result == 'success' && !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    needs:
      - Get-Settings
      - Get-TestResults
      - Get-CodeCoverage
      - Build-Docs
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
