name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key to use when publishing modules
        required: true
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Path:
        type: string
        description: The path to the source code of the module.
        required: false
        default: src
      ModulesOutputPath:
        type: string
        description: The path to the output directory for the modules.
        required: false
        default: outputs/modules
      DocsOutputPath:
        type: string
        description: The path to the output directory for the documentation.
        required: false
        default: outputs/docs
      SkipTests:
        type: string
        description: Defines what types of tests to skip. Allowed values are 'All', 'SourceCode', 'Module', 'None', 'macOS', 'Windows', 'Linux', 'Desktop', 'Core'.
        required: false
        default: None
      TestProcess:
        type: boolean
        description: Whether to test the process.
        required: false
        default: false
      Version:
        type: string
        description: The version of the 'Utilities' module to process.
        required: false
      Prerelease:
        type: boolean
        description: Whether the version is a prerelease.
        required: false
        default: false

env:
  GITHUB_TOKEN: ${{ github.token }} # Used for GitHub CLI authentication

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  TestSourceCode-pwsh-ubuntu-latest:
    name: Test source code (pwsh, ubuntu-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'SourceCode') || contains(inputs.SkipTests, 'Linux') || contains(inputs.SkipTests, 'Core')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: pwsh
          TestType: SourceCode

  TestSourceCode-pwsh-macos-latest:
    name: Test source code (pwsh, macos-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'SourceCode' ) || contains(inputs.SkipTests, 'macOS') || contains(inputs.SkipTests, 'Core')) }}
    runs-on: macos-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: pwsh
          TestType: SourceCode

  TestSourceCode-pwsh-windows-latest:
    name: Test source code (pwsh, windows-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All' ) || contains(inputs.SkipTests, 'SourceCode' ) || contains(inputs.SkipTests, 'Windows') || contains(inputs.SkipTests, 'Core')) }}
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: pwsh
          TestType: SourceCode

  TestSourceCode-powershell-windows-latest:
    name: Test source code (powershell, windows-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All' ) || contains(inputs.SkipTests, 'SourceCode' ) || contains(inputs.SkipTests, 'Windows') || contains(inputs.SkipTests, 'Desktop')) }}
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: powershell

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: powershell
          TestType: SourceCode

  BuildModule:
    name: Build module
    if: ${{ contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-ubuntu-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-macos-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-windows-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-powershell-windows-latest.result) && !cancelled() }}
    needs:
      - TestSourceCode-pwsh-ubuntu-latest
      - TestSourceCode-pwsh-macos-latest
      - TestSourceCode-pwsh-windows-latest
      - TestSourceCode-powershell-windows-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Build module
        uses: PSModule/Build-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          ModulesOutputPath: ${{ inputs.ModulesOutputPath }}
          DocsOutputPath: ${{ inputs.DocsOutputPath }}

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}
          if-no-files-found: error
          retention-days: 1

  #This is necessary as there is no way to get output from a matrix job
  TestModule-pwsh-ubuntu-latest:
    name: Test module (pwsh, ubuntu-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'Linux') || contains(inputs.SkipTests, 'Core')) && !cancelled() }}
    needs: BuildModule
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v1
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: Module

      - name: Set status
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModule-pwsh-macos-latest:
    name: Test module (pwsh, macos-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'macOS') || contains(inputs.SkipTests, 'Core')) && !cancelled() }}
    needs: BuildModule
    runs-on: macos-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v1
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: Module

      - name: Set status
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModule-pwsh-windows-latest:
    name: Test module (pwsh, windows-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'Windows') || contains(inputs.SkipTests, 'Core')) && !cancelled() }}
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v1
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: Module

      - name: Set status
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModule-powershell-windows-latest:
    name: Test module (powershell, windows-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'Windows') || contains(inputs.SkipTests, 'Desktop')) && !cancelled() }}
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: powershell

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v1
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: powershell
          TestType: Module

      - name: Set status
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModuleStatus:
    name: Test module status
    if: ${{ contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-ubuntu-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-macos-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-windows-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestModule-powershell-windows-latest.result) && !cancelled() }}
    needs:
      - TestModule-pwsh-ubuntu-latest
      - TestModule-pwsh-macos-latest
      - TestModule-pwsh-windows-latest
      - TestModule-powershell-windows-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Summerize tests
        shell: pwsh
        run: |
          Start-LogGroup -Name 'Passed tests'

          $linuxPassed = '${{ needs.TestModule-pwsh-ubuntu-latest.outputs.passed }}' -eq 'true'
          $linuxSkipped = '${{ needs.TestModule-pwsh-ubuntu-latest.result }}' -eq 'skipped'
          $macOSPassed = '${{ needs.TestModule-pwsh-macos-latest.outputs.passed }}' -eq 'true'
          $macOSSkipped = '${{ needs.TestModule-pwsh-macos-latest.result }}' -eq 'skipped'
          $windowsPassed = '${{ needs.TestModule-pwsh-windows-latest.outputs.passed }}' -eq 'true'
          $windowsSkipped = '${{ needs.TestModule-pwsh-windows-latest.result }}' -eq 'skipped'
          $desktopPassed = '${{ needs.TestModule-powershell-windows-latest.outputs.passed }}' -eq 'true'
          $desktopSkipped = '${{ needs.TestModule-powershell-windows-latest.result }}' -eq 'skipped'
          $corePassed = $linuxPassed -or $macOSPassed -or $windowsPassed
          $coreSkipped = $linuxSkipped -and $macOSSkipped -and $windowsSkipped
          $anyPassed = $corePassed -or $desktopPassed
          $allSkipped = $coreSkipped -and $desktopSkipped

          $Status = @(
              [pscustomobject]@{
                  Name    = 'Linux'
                  Icon    = $linuxSkipped ? '⚠️' : $linuxPassed ? '✅' : '❌'
                  Status  = $linuxSkipped ? 'Skipped' : $linuxPassed ? 'Passed' : 'Failed'
              }
              [pscustomobject]@{
                  Name    = 'MacOS'
                  Icon    = $macOSSkipped ? '⚠️' : $macOSPassed ? '✅' : '❌'
                  Status  = $macOSSkipped ? 'Skipped' : $macOSPassed ? 'Passed' : 'Failed'
              }
              [pscustomobject]@{
                  Name    = 'Windows'
                  Icon    = $windowsSkipped ? '⚠️' : $windowsPassed ? '✅' : '❌'
                  Status  = $windowsSkipped ? 'Skipped' : $windowsPassed ? 'Passed' : 'Failed'
              }
              [pscustomobject]@{
                  Name    = 'Desktop'
                  Icon    = $desktopSkipped ? '⚠️' : $desktopPassed ? '✅' : '❌'
                  Status  = $desktopSkipped ? 'Skipped' : $desktopPassed ? 'Passed' : 'Failed'
              }
              [pscustomobject]@{
                  Name    = 'Core'
                  Icon    = $coreSkipped ? '⚠️' : $corePassed ? '✅' : '❌'
                  Status  = $coreSkipped ? 'Skipped' : $corePassed ? 'Passed' : 'Failed'
              }
              [pscustomobject]@{
                  Name    = 'Result'
                  Icon    = $allSkipped ? '⚠️' : $anyPassed ? '✅' : '❌'
                  Status  = $allSkipped ? 'Skipped' : $anyPassed ? 'Passed' : 'Failed'
              }
          )

          Write-Host ($Status | Format-Table | Out-String)
          ($Status | New-MDTable) | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          Stop-LogGroup

          if (-not $anyPassed -and -not $allSkipped) {
              Write-Host "::[error]::No tests passed"
              exit 1
          }

          Start-LogGroup -Name 'Data'
          $moduleName = [string]::IsNullOrEmpty('${{ inputs.Name }}') ? $env:GITHUB_REPOSITORY_NAME : '${{ inputs.Name }}'
          $path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ inputs.ModulesOutputPath }}\$moduleName"
          $moduleManifestPath = Join-Path -Path $Path -ChildPath "$moduleName.psd1"

          $data = [pscustomobject]@{
            ModuleName         = $moduleName
            Path               = $path
            ModuleManifestPath = $moduleManifestPath
          }
          Write-Host ($data | Format-Table | Out-String)

          Set-ModuleManifest -Path $moduleManifestPath -PowerShellVersion '5.1'

          #TODO: DONT OVERRIDE MANIFEST

          if ($Desktop) {
              Add-ModuleManifestData -Path $moduleManifestPath -CompatiblePSEditions 'Desktop'
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'PSEdition_Desktop'
          } else {
              Set-ModuleManifest -Path $moduleManifestPath -PowerShellVersion '7.0'
          }

          if ($Core) {
              Add-ModuleManifestData -Path $moduleManifestPath -CompatiblePSEditions 'Core'
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'PSEdition_Core'
          }

          if ($Linux) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Linux'
          }

          if ($MacOS) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'MacOS'
          }

          if ($Windows) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Windows'
          }
          Stop-LogGroup

          Start-LogGroup -Name 'Module Manifest'
          Show-FileContent -Path $moduleManifestPath
          Stop-LogGroup

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  LintDocs:
    name: Lint documentation
    if: ${{ needs.BuildModule.result == 'success' && !cancelled() }}
    needs: BuildModule
    runs-on: ubuntu-latest
    steps:
      - name: Init empty repository
        shell: pwsh
        run: |
          git init --initial-branch=main

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs

      - name: Download linter settings
        shell: pwsh
        run: |
          $ref = if ($env:GITHUB_REF -like "refs/pull/*/merge") {
              $env:GITHUB_HEAD_REF
          } else {
              $env:GITHUB_REF_NAME
          }
          Write-Verbose "Ref: $ref" -Verbose
          $null = New-Item -Path '.github/linters' -ItemType Directory -Force
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/${{ github.repository }}/$ref/.github/linters/.textlintrc" -OutFile '.github/linters/.textlintrc' -Verbose

      - name: Commit docs for linting
        id: commit-docs
        shell: pwsh
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update documentation"

      - name: Lint documentation
        uses: super-linter/super-linter/slim@latest
        env:
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          GITHUB_TOKEN: ${{ github.token }}
          RUN_LOCAL: true # Running "locally" to avoid issues with GITHUB_SHA issue of a squash merge.
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true

  PublishModule:
    name: Publish module
    if: ${{ needs.TestModuleStatus.result == 'success' && needs.LintDocs.result == 'success' && !cancelled() }}
    needs:
      - TestModuleStatus
      - LintDocs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}

      - name: Publish module
        uses: PSModule/Publish-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          ModulePath: ${{ inputs.ModulesOutputPath }}
          DocsPath: ${{ inputs.DocsOutputPath }}
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ inputs.TestProcess }}
