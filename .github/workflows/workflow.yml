name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key to use when publishing modules
        required: true
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Path:
        type: string
        description: The path to the source code of the module.
        required: false
        default: src
      ModulesOutputPath:
        type: string
        description: The path to the output directory for the modules.
        required: false
        default: outputs/modules
      DocsOutputPath:
        type: string
        description: The path to the output directory for the documentation.
        required: false
        default: outputs/docs
      SkipTests:
        type: boolean
        description: Whether to skip tests.
        required: false
        default: false
      TestProcess:
        type: boolean
        description: Whether to test the process.
        required: false
        default: false
      Version:
        type: string
        description: The version of the 'Utilities' module to process.
        required: false
      Prerelease:
        type: boolean
        description: Whether the version is a prerelease.
        required: false
        default: false

env:
  GITHUB_TOKEN: ${{ github.token }} # Used for GitHub CLI authentication

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  TestSourceCode:
    name: Test source code
    strategy:
      fail-fast: false
      matrix:
        shell: [pwsh]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - shell: powershell
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: ${{ matrix.shell }}

      - name: Test built module
        uses: PSModule/Test-PSModule@v1
        if: ${{ inputs.SkipTests != true }}
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: ${{ matrix.shell }}
          TestType: SourceCode

  BuildModule:
    name: Build module
    needs: TestSourceCode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Build module
        uses: PSModule/Build-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          ModulesOutputPath: ${{ inputs.ModulesOutputPath }}
          DocsOutputPath: ${{ inputs.DocsOutputPath }}

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}
          if-no-files-found: error
          retention-days: 1

  #This is necessary as there is no way to get output from a matrix job
  TestModule-pwsh-ubuntu-latest:
    name: Test module (pwsh@ubuntu-latest)
    needs: BuildModule
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        if: ${{ inputs.SkipTests != true }}
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: Module

  TestModule-pwsh-macos-latest:
    name: Test module (pwsh@macos-latest)
    needs: BuildModule
    runs-on: macos-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        if: ${{ inputs.SkipTests != true }}
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: 'Module'

  TestModule-pwsh-windows-latest:
    name: Test module (pwsh@windows-latest)
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        if: ${{ inputs.SkipTests != true }}
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: 'Module'

  TestModule-powershell-windows-latest:
    name: Test module (powershell@windows-latest)
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: powershell

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        if: ${{ inputs.SkipTests != true }}
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: powershell
          TestType: 'Module'

  TestModule:
    name: Test module
    needs:
      - TestModule-pwsh-ubuntu-latest
      - TestModule-pwsh-macos-latest
      - TestModule-pwsh-windows-latest
      - TestModule-powershell-windows-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Summerize tests
        shell: pwsh
        run: |
          $Linux = '${{ needs.TestModule-pwsh-ubuntu-latest.outputs.passed }}' -eq 'true'
          $MacOS = '${{ needs.TestModule-pwsh-macos-latest.outputs.passed }}' -eq 'true'
          $Windows = '${{ needs.TestModule-pwsh-windows-latest.outputs.passed }}' -eq 'true'
          $Desktop = '${{ needs.TestModule-powershell-windows-latest.outputs.passed }}' -eq 'true'
          $Core = $Linux -or $MacOS -or $Windows

          $Status = @{
            Linux   = $Linux
            MacOS   = $MacOS
            Windows = $Windows
            Desktop = $Desktop
            Core    = $Core
          }

          Write-Verbose "Status:" -Verbose
          Write-Verbose ($Status | Out-String) -Verbose

      # - name: Upload module artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: module
      #     path: ${{ inputs.ModulesOutputPath }}
      #     if-no-files-found: error
      #     retention-days: 1

  LintDocs:
    name: Lint documentation
    needs: BuildModule
    runs-on: ubuntu-latest
    steps:
      - name: Init empty repository
        shell: pwsh
        run: |
          git init --initial-branch=main

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs

      - name: Commit docs for linting
        id: commit-docs
        shell: pwsh
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update documentation"

      - name: Lint documentation
        uses: super-linter/super-linter/slim@latest
        env:
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          GITHUB_TOKEN: ${{ github.token }}
          RUN_LOCAL: true # Running "locally" to avoid issues with GITHUB_SHA issue of a squash merge.
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true

  PublishModule:
    name: Publish module
    needs:
      - TestModule
      - LintDocs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}

      - name: Publish module
        uses: PSModule/Publish-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          ModulePath: ${{ inputs.ModulesOutputPath }}
          DocsPath: ${{ inputs.DocsOutputPath }}
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ inputs.TestProcess }}
