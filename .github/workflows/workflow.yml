name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key for the PowerShell Gallery.
        required: true
      TEST_APP_ENT_CLIENT_ID:
        description: The client ID of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ENT_PRIVATE_KEY:
        description: The private key of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ORG_CLIENT_ID:
        description: The client ID of an Organization GitHub App for running tests.
        required: false
      TEST_APP_ORG_PRIVATE_KEY:
        description: The private key of an Organization GitHub App for running tests.
        required: false
      TEST_USER_ORG_FG_PAT:
        description: The fine-grained personal access token with org access for running tests.
        required: false
      TEST_USER_USER_FG_PAT:
        description: The fine-grained personal access token with user account access for running tests.
        required: false
      TEST_USER_PAT:
        description: The classic personal access token for running tests.
        required: false
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Path:
        type: string
        description: The path to the source code of the module.
        required: false
        default: src
      ModulesOutputPath:
        type: string
        description: The path to the output directory for the modules.
        required: false
        default: outputs/modules
      DocsOutputPath:
        type: string
        description: The path to the output directory for the documentation.
        required: false
        default: outputs/docs
      SiteOutputPath:
        type: string
        description: The path to the output directory for the site.
        required: false
        default: outputs/site
      SkipTests:
        type: string
        description: Defines what types of tests to skip. Allowed values are 'All', 'SourceCode', 'Module', 'None', 'macOS', 'Windows', 'Linux'.
        required: false
        default: None
      TestProcess:
        type: boolean
        description: Whether to test the process.
        required: false
        default: false
      PublishDocs:
        type: boolean
        description: Whether to publish the documentation using MkDocs and GitHub Pages.
        required: false
        default: true
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false

env:
  GITHUB_TOKEN: ${{ github.token }} # Used for GitHub CLI authentication
  TEST_APP_ENT_CLIENT_ID: ${{ secrets.TEST_APP_ENT_CLIENT_ID }}
  TEST_APP_ENT_PRIVATE_KEY: ${{ secrets.TEST_APP_ENT_PRIVATE_KEY }}
  TEST_APP_ORG_CLIENT_ID: ${{ secrets.TEST_APP_ORG_CLIENT_ID }}
  TEST_APP_ORG_PRIVATE_KEY: ${{ secrets.TEST_APP_ORG_PRIVATE_KEY }}
  TEST_USER_ORG_FG_PAT: ${{ secrets.TEST_USER_ORG_FG_PAT }}
  TEST_USER_USER_FG_PAT: ${{ secrets.TEST_USER_USER_FG_PAT }}
  TEST_USER_PAT: ${{ secrets.TEST_USER_PAT }}

permissions:
  contents: write      # to checkout the repo and create releases on the repo
  pull-requests: write # to write comments to PRs
  statuses: write      # to update the status of the workflow from linter
  pages: write         # to deploy to Pages
  id-token: write      # to verify the deployment originates from an appropriate source

jobs:
  TestSourceCode-pwsh-ubuntu-latest:
    name: Test source code (pwsh, ubuntu-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'SourceCode') || contains(inputs.SkipTests, 'Linux')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v2
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          TestType: SourceCode
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  TestSourceCode-pwsh-macos-latest:
    name: Test source code (pwsh, macos-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'SourceCode' ) || contains(inputs.SkipTests, 'macOS')) }}
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v2
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          TestType: SourceCode
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  TestSourceCode-pwsh-windows-latest:
    name: Test source code (pwsh, windows-latest)
    if: ${{ !(contains(inputs.SkipTests, 'All' ) || contains(inputs.SkipTests, 'SourceCode' ) || contains(inputs.SkipTests, 'Windows')) }}
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Test source code
        id: test
        uses: PSModule/Test-PSModule@v2
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          TestType: SourceCode
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  BuildModule:
    name: Build module
    if: ${{ contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-ubuntu-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-macos-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestSourceCode-pwsh-windows-latest.result) && !cancelled() }}
    needs:
      - TestSourceCode-pwsh-ubuntu-latest
      - TestSourceCode-pwsh-macos-latest
      - TestSourceCode-pwsh-windows-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Build module
        uses: PSModule/Build-PSModule@v2
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          ModulesOutputPath: ${{ inputs.ModulesOutputPath }}
          DocsOutputPath: ${{ inputs.DocsOutputPath }}
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  #This is necessary as there is no way to get output from a matrix job
  TestModule-pwsh-ubuntu-latest:
    name: Test module (pwsh, ubuntu-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'Linux')) && !cancelled() }}
    needs: BuildModule
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v2
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          TestType: Module
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Passed: [${{ steps.test.outputs.passed }}]"

      - name: Failed test
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModule-pwsh-macos-latest:
    name: Test module (pwsh, macos-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'macOS')) && !cancelled() }}
    needs: BuildModule
    runs-on: macos-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v2
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          TestType: Module
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Passed: [${{ steps.test.outputs.passed }}]"

      - name: Failed test
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModule-pwsh-windows-latest:
    name: Test module (pwsh, windows-latest)
    if: ${{ needs.BuildModule.result == 'success' && !(contains(inputs.SkipTests, 'All') || contains(inputs.SkipTests, 'Module') || contains(inputs.SkipTests, 'Windows')) && !cancelled() }}
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@v2
        continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          TestType: Module
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Status
        shell: pwsh
        run: |
          Write-Host "Passed: [${{ steps.test.outputs.passed }}]"

      - name: Failed test
        if: steps.test.outcome != 'success'
        shell: pwsh
        run: Write-Host "Complete successfully"

  TestModuleStatus:
    name: Test module status
    if: ${{ contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-ubuntu-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-macos-latest.result) && contains(fromJson('["success", "skipped"]'), needs.TestModule-pwsh-windows-latest.result) && !cancelled() }}
    needs:
      - TestModule-pwsh-ubuntu-latest
      - TestModule-pwsh-macos-latest
      - TestModule-pwsh-windows-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Summerize tests
        uses: PSModule/GitHub-Script@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          Script: |
            LogGroup -Name 'Test analysis' {

                $linuxPassed = '${{ needs.TestModule-pwsh-ubuntu-latest.outputs.passed }}' -eq 'true'
                $linuxSkipped = '${{ needs.TestModule-pwsh-ubuntu-latest.result }}' -eq 'skipped'
                $macOSPassed = '${{ needs.TestModule-pwsh-macos-latest.outputs.passed }}' -eq 'true'
                $macOSSkipped = '${{ needs.TestModule-pwsh-macos-latest.result }}' -eq 'skipped'
                $windowsPassed = '${{ needs.TestModule-pwsh-windows-latest.outputs.passed }}' -eq 'true'
                $windowsSkipped = '${{ needs.TestModule-pwsh-windows-latest.result }}' -eq 'skipped'
                $anyPassed = $linuxPassed -or $macOSPassed -or $windowsPassed
                $allSkipped = $linuxSkipped -and $macOSSkipped -and $windowsSkipped

                $Status = @(
                    [pscustomobject]@{
                        Name    = 'Linux'
                        Icon    = $linuxSkipped ? '⚠️' : $linuxPassed ? '✅' : '❌'
                        Status  = $linuxSkipped ? 'Skipped' : $linuxPassed ? 'Passed' : 'Failed'
                    }
                    [pscustomobject]@{
                        Name    = 'MacOS'
                        Icon    = $macOSSkipped ? '⚠️' : $macOSPassed ? '✅' : '❌'
                        Status  = $macOSSkipped ? 'Skipped' : $macOSPassed ? 'Passed' : 'Failed'
                    }
                    [pscustomobject]@{
                        Name    = 'Windows'
                        Icon    = $windowsSkipped ? '⚠️' : $windowsPassed ? '✅' : '❌'
                        Status  = $windowsSkipped ? 'Skipped' : $windowsPassed ? 'Passed' : 'Failed'
                    }
                    [pscustomobject]@{
                        Name    = 'Result'
                        Icon    = $allSkipped ? '⚠️' : $anyPassed ? '✅' : '❌'
                        Status  = $allSkipped ? 'Skipped' : $anyPassed ? 'Passed' : 'Failed'
                    }
                )

                Write-Host ($Status | Format-Table | Out-String)
                ($Status | New-MDTable) | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

                if (-not $anyPassed -and -not $allSkipped) {
                    Write-Host "::[error]::No tests passed"
                    exit 1
                }
            }

            LogGroup 'Data' {
                $moduleName = [string]::IsNullOrEmpty('${{ inputs.Name }}') ? $env:GITHUB_REPOSITORY_NAME : '${{ inputs.Name }}'
                $path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ inputs.ModulesOutputPath }}\$moduleName"
                $moduleManifestPath = Join-Path -Path $Path -ChildPath "$moduleName.psd1"

                # Obay module manifest overrides
                $sourcePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ inputs.Path }}"
                $sourceModuleManifestPath = Join-Path -Path $sourcePath -ChildPath "manifest.psd1"
                if (Test-Path -Path $sourceModuleManifestPath) {
                  $sourceManifest = Import-PowerShellDataFile -Path $sourceModuleManifestPath
                }

                $data = [pscustomobject]@{
                  ModuleName         = $moduleName
                  Path               = $path
                  ModuleManifestPath = $moduleManifestPath
                }
                Write-Verbose ($data | Format-List | Out-String) -Verbose

                # If the source module manifest has a PowerShellVersion, use that, otherwise use the latest version.
                $powerShellVersion = $sourceManifest.PowerShellVersion ?? '7.4'
                Set-ModuleManifest -Path $moduleManifestPath -PowerShellVersion $powerShellVersion

                Add-ModuleManifestData -Path $moduleManifestPath -CompatiblePSEditions 'Core'
                Add-ModuleManifestData -Path $moduleManifestPath -Tags 'PSEdition_Core'

                if ($linuxPassed) {
                    Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Linux'
                }

                if ($macOSPassed) {
                    Add-ModuleManifestData -Path $moduleManifestPath -Tags 'MacOS'
                }

                if ($windowsPassed) {
                    Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Windows'
                }
            }

            LogGroup 'Module Manifest - Source' {
                Show-FileContent -Path $moduleManifestPath
            }

            LogGroup 'Module Manifest' {
                Show-FileContent -Path $moduleManifestPath
            }

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  LintDocs:
    name: Lint documentation
    if: ${{ needs.BuildModule.result == 'success' && !cancelled() }}
    needs: BuildModule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: ${{ github.workspace }}

      - name: Commit docs for linting
        shell: pwsh
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update documentation"

      - name: Lint documentation
        uses: super-linter/super-linter/slim@latest
        env:
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true
          GITHUB_TOKEN: ${{ github.token }}
          RUN_LOCAL: true
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JSCPD: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_YAML_PRETTIER: false
          VALIDATE_JSON_PRETTIER: false
          VALIDATE_GITLEAKS: false

  BuildSite:
    name: Build Site
    if: ${{ inputs.PublishDocs && needs.LintDocs.result == 'success' && !cancelled() }}
    needs: LintDocs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: '${{ inputs.SiteOutputPath }}/docs/Functions'

      - uses: actions/configure-pages@v5

      - name: Install mkdoks-material
        shell: pwsh
        run: |
          pip install mkdocs-material
          pip install mkdocs-git-authors-plugin
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-git-committers-plugin-2

      - name: Structure site
        uses: PSModule/GitHub-Script@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}
          Script: |
            $moduleName = [string]::IsNullOrEmpty('${{ inputs.Name }}') ? $env:GITHUB_REPOSITORY_NAME : '${{ inputs.Name }}'
            $ModuleSourcePath = Join-Path $PWD -ChildPath '${{ inputs.Path }}'
            $SiteOutputPath = Join-Path $PWD -ChildPath '${{ inputs.SiteOutputPath }}'

            $functionDocsFolder = Join-Path -Path $SiteOutputPath -ChildPath 'docs/Functions' | Get-Item
            Get-ChildItem -Path $functionDocsFolder -Recurse -Force -Include '*.md' | ForEach-Object {
                $fileName = $_.Name
                $hash = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash
                LogGroup " - [$fileName] - [$hash]" {
                    Show-FileContent -Path $_
                }
            }

            LogGroup 'Build docs - Process about topics' {
                $aboutDocsFolderPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/About'
                $aboutDocsFolder = New-Item -Path $aboutDocsFolderPath -ItemType Directory -Force
                $aboutSourceFolder = Get-ChildItem -Path $ModuleSourcePath -Directory | Where-Object { $_.Name -eq 'en-US' }
                Get-ChildItem -Path $aboutSourceFolder -Filter *.txt | Copy-Item -Destination $aboutDocsFolder -Force -Verbose -PassThru |
                    Rename-Item -NewName { $_.Name -replace '.txt', '.md' }
            }

            LogGroup 'Build docs - Copy icon to assets' {
                $assetsFolderPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/Assets'
                $null = New-Item -Path $assetsFolderPath -ItemType Directory -Force
                $rootPath = Split-Path -Path $ModuleSourcePath -Parent
                $iconPath = Join-Path -Path $rootPath -ChildPath 'icon\icon.png'
                Copy-Item -Path $iconPath -Destination $assetsFolderPath -Force -Verbose
            }

            LogGroup 'Build docs - Copy readme.md' {
                $rootPath = Split-Path -Path $ModuleSourcePath -Parent
                $readmePath = Join-Path -Path $rootPath -ChildPath 'README.md'
                $readmeTargetPath = Join-Path -Path $SiteOutputPath -ChildPath 'docs/README.md'
                Copy-Item -Path $readmePath -Destination $readmeTargetPath -Force -Verbose
            }

            LogGroup 'Build docs - Create mkdocs.yml' {
                $rootPath = Split-Path -Path $ModuleSourcePath -Parent
                # This should be moved to an action so that we can use a default one, and not have to copy it from the repo.
                $mkdocsSourcePath = Join-Path -Path $rootPath -ChildPath 'mkdocs.yml'
                $mkdocsTargetPath = Join-Path -Path $SiteOutputPath -ChildPath 'mkdocs.yml'
                $mkdocsContent = Get-Content -Path $mkdocsSourcePath -Raw
                $mkdocsContent = $mkdocsContent.Replace('-{{ REPO_NAME }}-', $ModuleName)
                $mkdocsContent = $mkdocsContent.Replace('-{{ REPO_OWNER }}-', $env:GITHUB_REPOSITORY_OWNER)
                $mkdocsContent | Set-Content -Path $mkdocsTargetPath -Force
                Show-FileContent -Path $mkdocsTargetPath
            }

      - name: Debug File system
        shell: pwsh
        run: |
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse | Select-Object -ExpandProperty FullName | Sort-Object

      - name: Build mkdocs-material project
        working-directory: ${{ inputs.SiteOutputPath }}
        shell: pwsh
        run: |
          Start-LogGroup 'Build docs - mkdocs build - content'
          Show-FileContent -Path mkdocs.yml
          Stop-LogGroup
          Start-LogGroup 'Build docs - mkdocs build'
          mkdocs build --config-file mkdocs.yml --site-dir ${{ github.workspace }}/_site
          Stop-LogGroup

      - uses: actions/upload-pages-artifact@v3

  PublishModule:
    name: Publish module
    if: ${{ needs.TestModuleStatus.result == 'success' && !cancelled() && github.event_name == 'pull_request' }}
    needs:
      - TestModuleStatus
      - BuildSite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Publish module
        uses: PSModule/Publish-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          ModulePath: ${{ inputs.ModulesOutputPath }}
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ inputs.TestProcess }}
          Debug: ${{ inputs.Debug }}
          Prerelease: ${{ inputs.Prerelease }}
          Verbose: ${{ inputs.Verbose }}
          Version: ${{ inputs.Version }}

  PublishSite:
    name: Publish documentation
    if: ${{ inputs.PublishDocs && needs.BuildSite.result == 'success' && !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    needs:
      - TestModuleStatus
      - BuildSite
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        if: ${{ inputs.Debug }}
        uses: PSModule/Debug@v0

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
