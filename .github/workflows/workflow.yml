name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key to use when publishing modules
        required: true
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      Path:
        type: string
        description: The path to the source code of the module.
        required: false
        default: src
      ModulesOutputPath:
        type: string
        description: The path to the output directory for the modules.
        required: false
        default: outputs/modules
      DocsOutputPath:
        type: string
        description: The path to the output directory for the documentation.
        required: false
        default: outputs/docs
      SkipTests:
        type: boolean
        description: Whether to skip tests.
        required: false
        default: false
      TestProcess:
        type: boolean
        description: Whether to test the process.
        required: false
        default: false
      Version:
        type: string
        description: The version of the 'Utilities' module to process.
        required: false
      Prerelease:
        type: boolean
        description: Whether the version is a prerelease.
        required: false
        default: false

env:
  GITHUB_TOKEN: ${{ github.token }} # Used for GitHub CLI authentication

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  TestSourceCode:
    name: Test code
    strategy:
      fail-fast: false
      matrix:
        shell: [pwsh]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - shell: powershell
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: ${{ matrix.shell }}

      - name: Test built module
        uses: PSModule/Test-PSModule@v1
        # if: ${{ inputs.SkipTests != true }}
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          Shell: ${{ matrix.shell }}
          TestType: SourceCode

  BuildModule:
    name: Build module
    needs: TestSourceCode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Build module
        uses: PSModule/Build-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.Path }}
          ModulesOutputPath: ${{ inputs.ModulesOutputPath }}
          DocsOutputPath: ${{ inputs.DocsOutputPath }}

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}
          if-no-files-found: error
          retention-days: 1

  #This is necessary as there is no way to get output from a matrix job
  TestModule-pwsh-ubuntu-latest:
    name: Test module (pwsh, ubuntu-latest)
    needs: BuildModule
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        # if: ${{ inputs.SkipTests != true }}
        # continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: Module

  TestModule-pwsh-macos-latest:
    name: Test module (pwsh, macos-latest)
    needs: BuildModule
    runs-on: macos-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        # if: ${{ inputs.SkipTests != true }}
        # continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: 'Module'

  TestModule-pwsh-windows-latest:
    name: Test module (pwsh, windows-latest)
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: pwsh

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        # if: ${{ inputs.SkipTests != true }}
        # continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: pwsh
          TestType: 'Module'

  TestModule-powershell-windows-latest:
    name: Test module (powershell, windows-latest)
    needs: BuildModule
    runs-on: windows-latest
    outputs:
      passed: ${{ steps.test.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}
          Shell: powershell

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Test built module
        id: test
        uses: PSModule/Test-PSModule@tests
        # if: ${{ inputs.SkipTests != true }}
        # continue-on-error: true
        with:
          Name: ${{ inputs.Name }}
          Path: ${{ inputs.ModulesOutputPath }}
          Shell: powershell
          TestType: 'Module'

  TestModuleStatus:
    name: Test module
    needs:
      - TestModule-pwsh-ubuntu-latest
      - TestModule-pwsh-macos-latest
      - TestModule-pwsh-windows-latest
      - TestModule-powershell-windows-latest
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Summerize tests
        shell: pwsh
        run: |
          $test = '${{ toJson(needs) }}' | ConvertFrom-Json

          Write-Host ($test | Out-String)

          Start-LogGroup -Name 'Status'
          $Linux = '${{ needs.TestModule-pwsh-ubuntu-latest.outputs.passed }}' -eq 'true'
          $MacOS = '${{ needs.TestModule-pwsh-macos-latest.outputs.passed }}' -eq 'true'
          $Windows = '${{ needs.TestModule-pwsh-windows-latest.outputs.passed }}' -eq 'true'
          $Desktop = '${{ needs.TestModule-powershell-windows-latest.outputs.passed }}' -eq 'true'
          $Core = $Linux -or $MacOS -or $Windows

          $Status = @{
              Linux   = $Linux
              MacOS   = $MacOS
              Windows = $Windows
              Desktop = $Desktop
              Core    = $Core
          }

          Write-Host "Status"
          Write-Host ($Status | Out-String)

          if (-not ($Core -or $Desktop)) {
              Write-Host "::[error]::No tests passed"
              exit 1
          }
          Stop-LogGroup

          Start-LogGroup -Name 'Data'
          $moduleName = [string]::IsNullOrEmpty('${{ inputs.Name }}') ? $env:GITHUB_REPOSITORY_NAME : '${{ inputs.Name }}'
          $path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ inputs.ModulesOutputPath }}\$moduleName"
          $moduleManifestPath = Join-Path -Path $Path -ChildPath "$moduleName.psd1"

          $data = @{
            ModuleName         = $moduleName
            Path               = $path
            ModuleManifestPath = $moduleManifestPath
          }
          Write-Host ($data | Out-String)

          if ($Desktop) {
              Add-ModuleManifestData -Path $moduleManifestPath -CompatiblePSEditions 'Desktop'
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'PSEdition_Desktop'
          }

          if ($Core) {
              Add-ModuleManifestData -Path $moduleManifestPath -CompatiblePSEditions 'Core'
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'PSEdition_Core'
              Set-ModuleManifest -Path $moduleManifestPath -PowerShellVersion '7.0'
          } else {
              Set-ModuleManifest -Path $moduleManifestPath -PowerShellVersion '5.1'
          }

          if ($Linux) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Linux'
          }

          if ($MacOS) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'MacOS'
          }

          if ($Windows) {
              Add-ModuleManifestData -Path $moduleManifestPath -Tags 'Windows'
          }
          Stop-LogGroup

          Start-LogGroup -Name 'Module Manifest'
          Show-FileContent -Path $moduleManifestPath
          Stop-LogGroup

      - name: Upload module artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  LintDocs:
    name: Lint documentation
    needs: BuildModule
    runs-on: ubuntu-latest
    steps:
      - name: Init empty repository
        shell: pwsh
        run: |
          git init --initial-branch=main

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs

      - name: Commit docs for linting
        id: commit-docs
        shell: pwsh
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update documentation"

      - name: Lint documentation
        uses: super-linter/super-linter/slim@latest
        env:
          DEFAULT_BRANCH: main
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          GITHUB_TOKEN: ${{ github.token }}
          RUN_LOCAL: true # Running "locally" to avoid issues with GITHUB_SHA issue of a squash merge.
          ENABLE_GITHUB_ACTIONS_GROUP_TITLE: true

  Test:
    name: Test
    needs:
      - TestModuleStatus
      - LintDocs
    runs-on: ubuntu-latest
    steps:
      - name: test
        shell: pwsh
        run: |
          Write-Host "TestModuleStatus: ${{ needs.TestModuleStatus.result == 'success' }}"
          Write-Host "LintDocs:         ${{ needs.LintDocs.result == 'success' }}"
          Write-Host "Total:            ${{ needs.TestModuleStatus.result == 'success' && needs.LintDocs.result == 'success' }}"

  PublishModule:
    name: Publish module
    if: ${{ needs.TestModuleStatus.result == 'success' && needs.LintDocs.result == 'success' }}
    needs:
      - TestModuleStatus
      - LintDocs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize environment
        uses: PSModule/Initialize-PSModule@v1
        with:
          Version: ${{ inputs.Version }}
          Prerelease: ${{ inputs.Prerelease }}

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.ModulesOutputPath }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: ${{ inputs.DocsOutputPath }}

      - name: Publish module
        uses: PSModule/Publish-PSModule@v1
        with:
          Name: ${{ inputs.Name }}
          ModulePath: ${{ inputs.ModulesOutputPath }}
          DocsPath: ${{ inputs.DocsOutputPath }}
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ inputs.TestProcess }}
