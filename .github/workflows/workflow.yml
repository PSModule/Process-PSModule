name: Process-PSModule

on:
  workflow_call:
    secrets:
      APIKey:
        description: The API key for the PowerShell Gallery.
        required: true
      TEST_APP_ENT_CLIENT_ID:
        description: The client ID of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ENT_PRIVATE_KEY:
        description: The private key of an Enterprise GitHub App for running tests.
        required: false
      TEST_APP_ORG_CLIENT_ID:
        description: The client ID of an Organization GitHub App for running tests.
        required: false
      TEST_APP_ORG_PRIVATE_KEY:
        description: The private key of an Organization GitHub App for running tests.
        required: false
      TEST_USER_ORG_FG_PAT:
        description: The fine-grained personal access token with org access for running tests.
        required: false
      TEST_USER_USER_FG_PAT:
        description: The fine-grained personal access token with user account access for running tests.
        required: false
      TEST_USER_PAT:
        description: The classic personal access token for running tests.
        required: false
    inputs:
      Name:
        type: string
        description: The name of the module to process. Scripts default to the repository name if nothing is specified.
        required: false
      SettingsPath:
        type: string
        description: The path to the settings file. Settings in the settings file take precedence over the action inputs.
        required: false
        default: .github/PSModule.yml
      Debug:
        type: boolean
        description: Enable debug output.
        required: false
        default: false
      Verbose:
        type: boolean
        description: Enable verbose output.
        required: false
        default: false
      Version:
        type: string
        description: Specifies the version of the GitHub module to be installed. The value must be an exact version.
        required: false
        default: ''
      Prerelease:
        type: boolean
        description: Whether to use a prerelease version of the 'GitHub' module.
        required: false
        default: false
      WorkingDirectory:
        type: string
        description: The path to the root of the repo.
        required: false
        default: '.'

permissions:
  contents: write      # to checkout the repo and create releases on the repo
  pull-requests: write # to write comments to PRs
  statuses: write      # to update the status of the workflow from linter
  pages: write         # to deploy to Pages
  id-token: write      # to verify the deployment originates from an appropriate source

jobs:
  Get-Settings:
    uses: ./.github/workflows/Get-Settings.yml
    with:
      Name: ${{ inputs.Name }}
      SettingsPath: ${{ inputs.SettingsPath }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Build-Module:
    if: ${{ fromJson(needs.Get-Settings.outputs.Settings).Build.Module.Skip != true }}
    uses: ./.github/workflows/Build-Module.yml
    needs:
      - Get-Settings
    with:
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Build-Docs:
    if: ${{ fromJson(needs.Get-Settings.outputs.Settings).Build.Docs.Skip != true }}
    needs:
      - Get-Settings
      - Build-Module
    uses: ./.github/workflows/Build-Docs.yml
    with:
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Build-Site:
    if: ${{ fromJson(needs.Get-Settings.outputs.Settings).Build.Site.Skip != true }}
    needs:
      - Get-Settings
      - Build-Docs
    uses: ./.github/workflows/Build-Site.yml
    with:
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Test-SourceCode:
    if: ${{ needs.Get-Settings.outputs.SourceCodeTestSuites != '[]' }}
    needs:
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.SourceCodeTestSuites) }}
    uses: ./.github/workflows/Test-SourceCode.yml
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Lint-SourceCode:
    if: ${{ needs.Get-Settings.outputs.SourceCodeTestSuites != '[]' }}
    needs:
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.SourceCodeTestSuites) }}
    uses: ./.github/workflows/Lint-SourceCode.yml
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  Test-Module:
    if: ${{ needs.Build-Module.result == 'success' && !cancelled() && needs.Get-Settings.outputs.PSModuleTestSuites != '[]' }}
    needs:
      - Build-Module
      - Get-Settings
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.PSModuleTestSuites) }}
    uses: ./.github/workflows/Test-Module.yml
    secrets: inherit
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  BeforeAll-ModuleLocal:
    if: ${{ needs.Build-Module.result == 'success' && !cancelled() && needs.Get-Settings.outputs.ModuleTestSuites != '[]' }}
    name: BeforeAll Setup
    runs-on: ubuntu-latest
    needs:
      - Build-Module
      - Get-Settings
    outputs:
      hasBeforeAll: ${{ steps.check-beforeall.outputs.hasBeforeAll }}
      hasAfterAll: ${{ steps.check-afterall.outputs.hasAfterAll }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for BeforeAll/AfterAll scripts
        id: check-beforeall
        shell: bash
        working-directory: ${{ inputs.WorkingDirectory }}
        run: |
          hasBeforeAll=false
          hasAfterAll=false
          
          # Check each test path for BeforeAll/AfterAll scripts
          testSuites='${{ needs.Get-Settings.outputs.ModuleTestSuites }}'
          echo "Test suites: $testSuites"
          
          if echo "$testSuites" | jq -e '.[] | select(.TestPath)' > /dev/null 2>&1; then
            for testPath in $(echo "$testSuites" | jq -r '.[].TestPath' | sort -u); do
              echo "Checking test path: $testPath"
              if [ -f "$testPath/BeforeAll.ps1" ]; then
                echo "BeforeAll.ps1 found in $testPath"
                hasBeforeAll=true
              fi
              if [ -f "$testPath/AfterAll.ps1" ]; then
                echo "AfterAll.ps1 found in $testPath"
                hasAfterAll=true
              fi
            done
          fi
          
          echo "hasBeforeAll=$hasBeforeAll" >> $GITHUB_OUTPUT
          echo "hasAfterAll=$hasAfterAll" >> $GITHUB_OUTPUT

      - name: Install-PSModuleHelpers
        if: steps.check-beforeall.outputs.hasBeforeAll == 'true'
        uses: PSModule/Install-PSModuleHelpers@v1

      - name: Run BeforeAll scripts
        if: steps.check-beforeall.outputs.hasBeforeAll == 'true'
        shell: pwsh
        working-directory: ${{ inputs.WorkingDirectory }}
        env:
          TEST_APP_ENT_CLIENT_ID: ${{ secrets.TEST_APP_ENT_CLIENT_ID }}
          TEST_APP_ENT_PRIVATE_KEY: ${{ secrets.TEST_APP_ENT_PRIVATE_KEY }}
          TEST_APP_ORG_CLIENT_ID: ${{ secrets.TEST_APP_ORG_CLIENT_ID }}
          TEST_APP_ORG_PRIVATE_KEY: ${{ secrets.TEST_APP_ORG_PRIVATE_KEY }}
          TEST_USER_ORG_FG_PAT: ${{ secrets.TEST_USER_ORG_FG_PAT }}
          TEST_USER_USER_FG_PAT: ${{ secrets.TEST_USER_USER_FG_PAT }}
          TEST_USER_PAT: ${{ secrets.TEST_USER_PAT }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $testSuites = '${{ needs.Get-Settings.outputs.ModuleTestSuites }}' | ConvertFrom-Json
          $processedPaths = @()
          
          foreach ($suite in $testSuites) {
            $testPath = $suite.TestPath
            if ($testPath -and $testPath -notin $processedPaths) {
              $beforeAllScript = Join-Path $testPath "BeforeAll.ps1"
              if (Test-Path $beforeAllScript) {
                Write-Host "Running BeforeAll setup script: $beforeAllScript"
                & $beforeAllScript
                $processedPaths += $testPath
              }
            }
          }

  Test-ModuleLocal:
    if: ${{ needs.Build-Module.result == 'success' && !cancelled() && needs.Get-Settings.outputs.ModuleTestSuites != '[]' }}
    needs:
      - Build-Module
      - Get-Settings
      - BeforeAll-ModuleLocal
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Get-Settings.outputs.ModuleTestSuites) }}
    uses: ./.github/workflows/Test-ModuleLocal.yml
    secrets: inherit
    with:
      RunsOn: ${{ matrix.RunsOn }}
      OS: ${{ matrix.OSName }}
      TestPath: ${{ matrix.TestPath }}
      TestName: ${{ matrix.TestName }}
      Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}
      WorkingDirectory: ${{ inputs.WorkingDirectory }}

  AfterAll-ModuleLocal:
    if: ${{ always() && needs.BeforeAll-ModuleLocal.outputs.hasAfterAll == 'true' }}
    name: AfterAll Teardown
    runs-on: ubuntu-latest
    needs:
      - BeforeAll-ModuleLocal
      - Test-ModuleLocal
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install-PSModuleHelpers
        uses: PSModule/Install-PSModuleHelpers@v1

      - name: Run AfterAll scripts
        shell: pwsh
        working-directory: ${{ inputs.WorkingDirectory }}
        env:
          TEST_APP_ENT_CLIENT_ID: ${{ secrets.TEST_APP_ENT_CLIENT_ID }}
          TEST_APP_ENT_PRIVATE_KEY: ${{ secrets.TEST_APP_ENT_PRIVATE_KEY }}
          TEST_APP_ORG_CLIENT_ID: ${{ secrets.TEST_APP_ORG_CLIENT_ID }}
          TEST_APP_ORG_PRIVATE_KEY: ${{ secrets.TEST_APP_ORG_PRIVATE_KEY }}
          TEST_USER_ORG_FG_PAT: ${{ secrets.TEST_USER_ORG_FG_PAT }}
          TEST_USER_USER_FG_PAT: ${{ secrets.TEST_USER_USER_FG_PAT }}
          TEST_USER_PAT: ${{ secrets.TEST_USER_PAT }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $testSuites = '${{ needs.Get-Settings.outputs.ModuleTestSuites }}' | ConvertFrom-Json
          $processedPaths = @()
          
          foreach ($suite in $testSuites) {
            $testPath = $suite.TestPath
            if ($testPath -and $testPath -notin $processedPaths) {
              $afterAllScript = Join-Path $testPath "AfterAll.ps1"
              if (Test-Path $afterAllScript) {
                Write-Host "Running AfterAll teardown script: $afterAllScript"
                & $afterAllScript
                $processedPaths += $testPath
              }
            }
          }

  Get-TestResults:
    if: needs.Get-Settings.result == 'success' && !fromJson(needs.Get-Settings.outputs.Settings).Test.TestResults.Skip && (needs.Get-Settings.outputs.SourceCodeTestSuites != '[]' || needs.Get-Settings.outputs.PSModuleTestSuites != '[]' || needs.Get-Settings.outputs.ModuleTestSuites != '[]') && (always() && !cancelled())
    needs:
      - Get-Settings
      - Test-SourceCode
      - Lint-SourceCode
      - Test-Module
      - Test-ModuleLocal
      - AfterAll-ModuleLocal
    uses: ./.github/workflows/Get-TestResults.yml
    secrets: inherit
    with:
      ModuleTestSuites: ${{ needs.Get-Settings.outputs.ModuleTestSuites }}
      SourceCodeTestSuites: ${{ needs.Get-Settings.outputs.SourceCodeTestSuites }}
      PSModuleTestSuites: ${{ needs.Get-Settings.outputs.PSModuleTestSuites }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}

  Get-CodeCoverage:
    if: needs.Get-Settings.result == 'success' && !fromJson(needs.Get-Settings.outputs.Settings).Test.CodeCoverage.Skip && (needs.Get-Settings.outputs.PSModuleTestSuites != '[]' || needs.Get-Settings.outputs.ModuleTestSuites != '[]') && (always() && !cancelled())
    needs:
      - Get-Settings
      - Test-Module
      - Test-ModuleLocal
      - AfterAll-ModuleLocal
    uses: ./.github/workflows/Get-CodeCoverage.yml
    secrets: inherit
    with:
      CodeCoveragePercentTarget: ${{ fromJson(needs.Get-Settings.outputs.Settings).Test.CodeCoverage.PercentTarget }}
      StepSummary_Mode: ${{ fromJson(needs.Get-Settings.outputs.Settings).Test.CodeCoverage.StepSummaryMode }}
      Debug: ${{ inputs.Debug }}
      Prerelease: ${{ inputs.Prerelease }}
      Verbose: ${{ inputs.Verbose }}
      Version: ${{ inputs.Version }}

  Publish-Site:
    if: ${{ needs.Get-TestResults.result == 'success' && needs.Get-CodeCoverage.result == 'success' && needs.Build-Site.result == 'success' && !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    needs:
      - Get-Settings
      - Get-TestResults
      - Get-CodeCoverage
      - Build-Site
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  Publish-Module:
    if: ${{ needs.Get-Settings.result == 'success' && needs.Get-TestResults.result == 'success' && needs.Get-CodeCoverage.result == 'success' && needs.Build-Site.result == 'success' && !cancelled() && github.event_name == 'pull_request' }}
    needs:
      - Get-Settings
      - Get-TestResults
      - Get-CodeCoverage
      - Build-Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download module artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: ${{ inputs.WorkingDirectory }}/outputs/module

      - name: Update Microsoft.PowerShell.PSResourceGet
        shell: pwsh
        run: |
          Install-PSResource -Name Microsoft.PowerShell.PSResourceGet -Repository PSGallery -TrustRepository

      - name: Publish module
        uses: PSModule/Publish-PSModule@v2
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          Name: ${{ fromJson(needs.Get-Settings.outputs.Settings).Name }}
          ModulePath: outputs/module
          APIKey: ${{ secrets.APIKEY }}
          WhatIf: ${{ github.repository == 'PSModule/Process-PSModule' }}
          AutoCleanup: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.AutoCleanup }}
          AutoPatching: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.AutoPatching }}
          DatePrereleaseFormat: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.DatePrereleaseFormat }}
          IgnoreLabels: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.IgnoreLabels }}
          IncrementalPrerelease: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.IncrementalPrerelease }}
          MajorLabels: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.MajorLabels }}
          MinorLabels: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.MinorLabels }}
          PatchLabels: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.PatchLabels }}
          VersionPrefix: ${{ fromJson(needs.Get-Settings.outputs.Settings).Publish.Module.VersionPrefix }}
          WorkingDirectory: ${{ inputs.WorkingDirectory }}
